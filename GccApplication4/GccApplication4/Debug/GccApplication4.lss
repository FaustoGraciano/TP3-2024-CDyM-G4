
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000a44  00000ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800152  00800152  00000b2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000158a  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  000022da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c45  00000000  00000000  00002e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a28  00000000  00000000  00004523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9e:	0c 94 20 05 	jmp	0xa40	; 0xa40 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getHumedad>:
	}
}

uint8_t getHumedad() {
	return humedad;
}
  a6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <humedad>
  aa:	08 95       	ret

000000ac <getTemperatura>:

uint8_t getTemperatura() {
	return temperatura;
  ac:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
  b0:	08 95       	ret

000000b2 <main>:
char hora[];
volatile uint8_t suspendFlag = 0; // Bandera de suspensión
int main(void)
{ 
	
	RTC_Init();
  b2:	0e 94 ed 00 	call	0x1da	; 0x1da <RTC_Init>
	int result=0;
    configurarTimer1();
  b6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <configurarTimer1>
	SerialPort_Init(BR9600); 
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	0e 94 91 01 	call	0x322	; 0x322 <SerialPort_Init>
	SerialPort_TX_Enable();		// Inicializo formato 8N1 y BAUDRATE = 9600bps
  c0:	0e 94 9b 01 	call	0x336	; 0x336 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  c4:	0e 94 a1 01 	call	0x342	; 0x342 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
  c8:	0e 94 a7 01 	call	0x34e	; 0x34e <SerialPort_RX_Interrupt_Enable>
	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
  cc:	78 94       	sei
    while(1){ 
	if(!suspendFlag) {		
  ce:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <suspendFlag>
  d2:	81 11       	cpse	r24, r1
  d4:	fc cf       	rjmp	.-8      	; 0xce <main+0x1c>
		DDRC|=(1<<PINC0);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
		PORTC&=(0<<PINC0);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	18 b8       	out	0x08, r1	; 8
		//inicializarContadores();
		//while(chequeoFlag1()!=1){
			
		//}
		//cli();
		DDRC&=(0<<PINC0);
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	17 b8       	out	0x07, r1	; 7
		PORTC|=(1<<PINC0);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	85 ed       	ldi	r24, 0xD5	; 213
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x3a>
  f0:	00 00       	nop
		_delay_us(40);
		//result = LeerDHT(PINC0);
		//  if (result == DHTLIB_OK) {
			  SerialPort_Send_String(msg1);
  f2:	88 e1       	ldi	r24, 0x18	; 24
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getHumedad());
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <getHumedad>
  fe:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg2);
 102:	84 e1       	ldi	r24, 0x14	; 20
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			  SerialPort_Send_String(msg3);	
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getTemperatura());
 112:	0e 94 56 00 	call	0xac	; 0xac <getTemperatura>
 116:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg4);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			   RTC_GetDate(fecha);
 122:	8a e5       	ldi	r24, 0x5A	; 90
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 33 01 	call	0x266	; 0x266 <RTC_GetDate>
			   SerialPort_Send_String(" FECHA: ");
 12a:	83 e2       	ldi	r24, 0x23	; 35
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			   SerialPort_Send_String(fecha);
 132:	8a e5       	ldi	r24, 0x5A	; 90
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			   RTC_GetTime(hora);
 13a:	89 e5       	ldi	r24, 0x59	; 89
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <RTC_GetTime>
			   SerialPort_Send_String(" HORA: ");
 142:	8c e2       	ldi	r24, 0x2C	; 44
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
			   SerialPort_Send_String(hora);
 14a:	89 e5       	ldi	r24, 0x59	; 89
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 b5 01 	call	0x36a	; 0x36a <SerialPort_Send_String>
		//	  } else {
			  ("Error: ");
		 // }
		  sei();
 152:	78 94       	sei
 154:	bc cf       	rjmp	.-136    	; 0xce <main+0x1c>

00000156 <bcdToDec>:

	// Formatear fecha y hora
	sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
	sprintf(dateStr, "%02d/%02d/%02d", day, month, year);
	
}
 156:	98 2f       	mov	r25, r24
 158:	92 95       	swap	r25
 15a:	9f 70       	andi	r25, 0x0F	; 15
 15c:	99 0f       	add	r25, r25
 15e:	29 2f       	mov	r18, r25
 160:	22 0f       	add	r18, r18
 162:	22 0f       	add	r18, r18
 164:	92 0f       	add	r25, r18
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	89 0f       	add	r24, r25
 16a:	08 95       	ret

0000016c <I2C_Init>:
 16c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	88 e9       	ldi	r24, 0x98	; 152
 172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	08 95       	ret

0000017e <I2C_Start>:
 17e:	84 ea       	ldi	r24, 0xA4	; 164
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 188:	88 23       	and	r24, r24
 18a:	e4 f7       	brge	.-8      	; 0x184 <I2C_Start+0x6>
 18c:	08 95       	ret

0000018e <I2C_Stop>:
 18e:	84 e9       	ldi	r24, 0x94	; 148
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 198:	84 fd       	sbrc	r24, 4
 19a:	fc cf       	rjmp	.-8      	; 0x194 <I2C_Stop+0x6>
 19c:	08 95       	ret

0000019e <I2C_Write>:
 19e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <I2C_Write+0xa>
 1b0:	08 95       	ret

000001b2 <I2C_ReadAck>:
 1b2:	84 ec       	ldi	r24, 0xC4	; 196
 1b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1bc:	88 23       	and	r24, r24
 1be:	e4 f7       	brge	.-8      	; 0x1b8 <I2C_ReadAck+0x6>
 1c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c4:	08 95       	ret

000001c6 <I2C_ReadNack>:
 1c6:	84 e8       	ldi	r24, 0x84	; 132
 1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_ReadNack+0x6>
 1d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d8:	08 95       	ret

000001da <RTC_Init>:
 1da:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Init>
 1de:	08 95       	ret

000001e0 <RTC_GetTime>:

void RTC_GetTime(char* timeStr) {
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	c8 2f       	mov	r28, r24
 1ec:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x00 (segundos)
	I2C_Start();
 1ee:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 1f2:	80 ed       	ldi	r24, 0xD0	; 208
 1f4:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	I2C_Write(0x00); // Dirección de registro de segundos
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	I2C_Stop();
 1fe:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Stop>

	// Leer tiempo (segundos, minutos, horas)
	I2C_Start();
 202:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 206:	81 ed       	ldi	r24, 0xD1	; 209
 208:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	uint8_t seconds = bcdToDec(I2C_ReadAck());
 20c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_ReadAck>
 210:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 214:	f8 2e       	mov	r15, r24
	uint8_t minutes = bcdToDec(I2C_ReadAck());
 216:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_ReadAck>
 21a:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 21e:	08 2f       	mov	r16, r24
	uint8_t hours = bcdToDec(I2C_ReadNack());
 220:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_ReadNack>
 224:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 228:	18 2f       	mov	r17, r24
	I2C_Stop();
 22a:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Stop>

	// Formatear hora
	sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
 22e:	1f 92       	push	r1
 230:	ff 92       	push	r15
 232:	1f 92       	push	r1
 234:	0f 93       	push	r16
 236:	1f 92       	push	r1
 238:	1f 93       	push	r17
 23a:	84 e3       	ldi	r24, 0x34	; 52
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	9f 93       	push	r25
 240:	8f 93       	push	r24
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	0e 94 36 02 	call	0x46c	; 0x46c <sprintf>
}
 24a:	8d b7       	in	r24, 0x3d	; 61
 24c:	9e b7       	in	r25, 0x3e	; 62
 24e:	0a 96       	adiw	r24, 0x0a	; 10
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	9e bf       	out	0x3e, r25	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	8d bf       	out	0x3d, r24	; 61
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	08 95       	ret

00000266 <RTC_GetDate>:

void RTC_GetDate(char* dateStr) {
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	c8 2f       	mov	r28, r24
 272:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x04 (día del mes)
	I2C_Start();
 274:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 278:	80 ed       	ldi	r24, 0xD0	; 208
 27a:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	I2C_Write(0x04); // Dirección de registro de día del mes
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	I2C_Stop();
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Stop>

	// Leer fecha (día, mes, año)
	I2C_Start();
 288:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 28c:	81 ed       	ldi	r24, 0xD1	; 209
 28e:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_Write>
	uint8_t day = bcdToDec(I2C_ReadAck());
 292:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_ReadAck>
 296:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 29a:	18 2f       	mov	r17, r24
	uint8_t month = bcdToDec(I2C_ReadAck());
 29c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_ReadAck>
 2a0:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 2a4:	08 2f       	mov	r16, r24
	uint8_t year = bcdToDec(I2C_ReadNack());
 2a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <I2C_ReadNack>
 2aa:	0e 94 ab 00 	call	0x156	; 0x156 <bcdToDec>
 2ae:	f8 2e       	mov	r15, r24
	I2C_Stop();
 2b0:	0e 94 c7 00 	call	0x18e	; 0x18e <I2C_Stop>

	// Formatear fecha
	sprintf(dateStr, "%02d/%02d/%02d", day, month, year);
 2b4:	1f 92       	push	r1
 2b6:	ff 92       	push	r15
 2b8:	1f 92       	push	r1
 2ba:	0f 93       	push	r16
 2bc:	1f 92       	push	r1
 2be:	1f 93       	push	r17
 2c0:	83 e4       	ldi	r24, 0x43	; 67
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	9f 93       	push	r25
 2c6:	8f 93       	push	r24
 2c8:	df 93       	push	r29
 2ca:	cf 93       	push	r28
 2cc:	0e 94 36 02 	call	0x46c	; 0x46c <sprintf>
}
 2d0:	8d b7       	in	r24, 0x3d	; 61
 2d2:	9e b7       	in	r25, 0x3e	; 62
 2d4:	0a 96       	adiw	r24, 0x0a	; 10
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	9e bf       	out	0x3e, r25	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	8d bf       	out	0x3d, r24	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	08 95       	ret

000002ec <__vector_18>:
}


char SerialPort_Recive_Data(void){
	return UDR0;
}
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2fe:	83 37       	cpi	r24, 0x73	; 115
 300:	11 f0       	breq	.+4      	; 0x306 <__vector_18+0x1a>
 302:	83 35       	cpi	r24, 0x53	; 83
 304:	39 f4       	brne	.+14     	; 0x314 <__vector_18+0x28>
 306:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <suspendFlag>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	91 11       	cpse	r25, r1
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <suspendFlag>
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <SerialPort_Init>:
 322:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 326:	96 e0       	ldi	r25, 0x06	; 6
 328:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 32c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 330:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 334:	08 95       	ret

00000336 <SerialPort_TX_Enable>:
 336:	e1 ec       	ldi	r30, 0xC1	; 193
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret

00000342 <SerialPort_RX_Enable>:
 342:	e1 ec       	ldi	r30, 0xC1	; 193
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 61       	ori	r24, 0x10	; 16
 34a:	80 83       	st	Z, r24
 34c:	08 95       	ret

0000034e <SerialPort_RX_Interrupt_Enable>:
 34e:	e1 ec       	ldi	r30, 0xC1	; 193
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 68       	ori	r24, 0x80	; 128
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <SerialPort_Wait_For_TX_Buffer_Free>:
 35a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 35e:	85 ff       	sbrs	r24, 5
 360:	fc cf       	rjmp	.-8      	; 0x35a <SerialPort_Wait_For_TX_Buffer_Free>
 362:	08 95       	ret

00000364 <SerialPort_Send_Data>:
 364:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 368:	08 95       	ret

0000036a <SerialPort_Send_String>:
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	7c 01       	movw	r14, r24
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	07 c0       	rjmp	.+14     	; 0x388 <SerialPort_Send_String+0x1e>
 37a:	0e 94 ad 01 	call	0x35a	; 0x35a <SerialPort_Wait_For_TX_Buffer_Free>
 37e:	f8 01       	movw	r30, r16
 380:	80 81       	ld	r24, Z
 382:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Send_Data>
 386:	cf 5f       	subi	r28, 0xFF	; 255
 388:	87 01       	movw	r16, r14
 38a:	0c 0f       	add	r16, r28
 38c:	11 1d       	adc	r17, r1
 38e:	f8 01       	movw	r30, r16
 390:	80 81       	ld	r24, Z
 392:	81 11       	cpse	r24, r1
 394:	f2 cf       	rjmp	.-28     	; 0x37a <SerialPort_Send_String+0x10>
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	08 95       	ret

000003a2 <SerialPort_Send_uint8_t>:


void SerialPort_Send_uint8_t(uint8_t num){
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	d8 2f       	mov	r29, r24
	
	SerialPort_Wait_For_TX_Buffer_Free();
 3a8:	0e 94 ad 01 	call	0x35a	; 0x35a <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+num/100);
 3ac:	89 e2       	ldi	r24, 0x29	; 41
 3ae:	d8 9f       	mul	r29, r24
 3b0:	81 2d       	mov	r24, r1
 3b2:	11 24       	eor	r1, r1
 3b4:	82 95       	swap	r24
 3b6:	8f 70       	andi	r24, 0x0F	; 15
 3b8:	80 5d       	subi	r24, 0xD0	; 208
 3ba:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Send_Data>
	
	num-=100;
 3be:	d4 56       	subi	r29, 0x64	; 100
	
	SerialPort_Wait_For_TX_Buffer_Free();
 3c0:	0e 94 ad 01 	call	0x35a	; 0x35a <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+num/10);
 3c4:	cd ec       	ldi	r28, 0xCD	; 205
 3c6:	dc 9f       	mul	r29, r28
 3c8:	c1 2d       	mov	r28, r1
 3ca:	11 24       	eor	r1, r1
 3cc:	c6 95       	lsr	r28
 3ce:	c6 95       	lsr	r28
 3d0:	c6 95       	lsr	r28
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	8c 0f       	add	r24, r28
 3d6:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Send_Data>
	
	SerialPort_Wait_For_TX_Buffer_Free();
 3da:	0e 94 ad 01 	call	0x35a	; 0x35a <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+ num%10);
 3de:	cc 0f       	add	r28, r28
 3e0:	8c 2f       	mov	r24, r28
 3e2:	88 0f       	add	r24, r24
 3e4:	88 0f       	add	r24, r24
 3e6:	c8 0f       	add	r28, r24
 3e8:	8d 2f       	mov	r24, r29
 3ea:	8c 1b       	sub	r24, r28
 3ec:	80 5d       	subi	r24, 0xD0	; 208
 3ee:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Send_Data>
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <configurarTimer1>:
			Flag_MEF=0;
			return 1;
		}
		else return 0;
	
	}
 3f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3fc:	e1 e8       	ldi	r30, 0x81	; 129
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	8b 60       	ori	r24, 0x0B	; 11
 404:	80 83       	st	Z, r24
 406:	89 ef       	ldi	r24, 0xF9	; 249
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 40e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 412:	ef e6       	ldi	r30, 0x6F	; 111
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
 41c:	78 94       	sei
 41e:	08 95       	ret

00000420 <__vector_11>:

	ISR(TIMER1_COMPA_vect) {
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
		countMEF++;    //Incremento del contador para la Flag
 42e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <countMEF>
 432:	9f 5f       	subi	r25, 0xFF	; 255
 434:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <countMEF>
		count2++;
 438:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <count2>
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <count2>
		if(countMEF == 20){		//cada 10 interrupciones se activa el FLAG de chequeo de MEF
 442:	94 31       	cpi	r25, 0x14	; 20
 444:	29 f4       	brne	.+10     	; 0x450 <__vector_11+0x30>
			Flag_MEF = 1;
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <Flag_MEF>
			countMEF = 0;
 44c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <countMEF>
		}
		if(count2==200){
 450:	88 3c       	cpi	r24, 0xC8	; 200
 452:	29 f4       	brne	.+10     	; 0x45e <__vector_11+0x3e>
			Flag_tiempo=1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Flag_tiempo>
			count2=0;
 45a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <count2>
		}
	}
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <sprintf>:
 46c:	ae e0       	ldi	r26, 0x0E	; 14
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	ec e3       	ldi	r30, 0x3C	; 60
 472:	f2 e0       	ldi	r31, 0x02	; 2
 474:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__prologue_saves__+0x1c>
 478:	0d 89       	ldd	r16, Y+21	; 0x15
 47a:	1e 89       	ldd	r17, Y+22	; 0x16
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	8c 83       	std	Y+4, r24	; 0x04
 480:	1a 83       	std	Y+2, r17	; 0x02
 482:	09 83       	std	Y+1, r16	; 0x01
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	9f e7       	ldi	r25, 0x7F	; 127
 488:	9e 83       	std	Y+6, r25	; 0x06
 48a:	8d 83       	std	Y+5, r24	; 0x05
 48c:	ae 01       	movw	r20, r28
 48e:	47 5e       	subi	r20, 0xE7	; 231
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	6f 89       	ldd	r22, Y+23	; 0x17
 494:	78 8d       	ldd	r23, Y+24	; 0x18
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <vfprintf>
 49e:	ef 81       	ldd	r30, Y+7	; 0x07
 4a0:	f8 85       	ldd	r31, Y+8	; 0x08
 4a2:	e0 0f       	add	r30, r16
 4a4:	f1 1f       	adc	r31, r17
 4a6:	10 82       	st	Z, r1
 4a8:	2e 96       	adiw	r28, 0x0e	; 14
 4aa:	e4 e0       	ldi	r30, 0x04	; 4
 4ac:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__epilogue_restores__+0x1c>

000004b0 <vfprintf>:
 4b0:	ab e0       	ldi	r26, 0x0B	; 11
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	ee e5       	ldi	r30, 0x5E	; 94
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__prologue_saves__>
 4bc:	6c 01       	movw	r12, r24
 4be:	7b 01       	movw	r14, r22
 4c0:	8a 01       	movw	r16, r20
 4c2:	fc 01       	movw	r30, r24
 4c4:	17 82       	std	Z+7, r1	; 0x07
 4c6:	16 82       	std	Z+6, r1	; 0x06
 4c8:	83 81       	ldd	r24, Z+3	; 0x03
 4ca:	81 ff       	sbrs	r24, 1
 4cc:	cc c1       	rjmp	.+920    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	3c 01       	movw	r6, r24
 4d4:	f6 01       	movw	r30, r12
 4d6:	93 81       	ldd	r25, Z+3	; 0x03
 4d8:	f7 01       	movw	r30, r14
 4da:	93 fd       	sbrc	r25, 3
 4dc:	85 91       	lpm	r24, Z+
 4de:	93 ff       	sbrs	r25, 3
 4e0:	81 91       	ld	r24, Z+
 4e2:	7f 01       	movw	r14, r30
 4e4:	88 23       	and	r24, r24
 4e6:	09 f4       	brne	.+2      	; 0x4ea <vfprintf+0x3a>
 4e8:	ba c1       	rjmp	.+884    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 4ea:	85 32       	cpi	r24, 0x25	; 37
 4ec:	39 f4       	brne	.+14     	; 0x4fc <vfprintf+0x4c>
 4ee:	93 fd       	sbrc	r25, 3
 4f0:	85 91       	lpm	r24, Z+
 4f2:	93 ff       	sbrs	r25, 3
 4f4:	81 91       	ld	r24, Z+
 4f6:	7f 01       	movw	r14, r30
 4f8:	85 32       	cpi	r24, 0x25	; 37
 4fa:	29 f4       	brne	.+10     	; 0x506 <vfprintf+0x56>
 4fc:	b6 01       	movw	r22, r12
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 504:	e7 cf       	rjmp	.-50     	; 0x4d4 <vfprintf+0x24>
 506:	91 2c       	mov	r9, r1
 508:	21 2c       	mov	r2, r1
 50a:	31 2c       	mov	r3, r1
 50c:	ff e1       	ldi	r31, 0x1F	; 31
 50e:	f3 15       	cp	r31, r3
 510:	d8 f0       	brcs	.+54     	; 0x548 <vfprintf+0x98>
 512:	8b 32       	cpi	r24, 0x2B	; 43
 514:	79 f0       	breq	.+30     	; 0x534 <vfprintf+0x84>
 516:	38 f4       	brcc	.+14     	; 0x526 <vfprintf+0x76>
 518:	80 32       	cpi	r24, 0x20	; 32
 51a:	79 f0       	breq	.+30     	; 0x53a <vfprintf+0x8a>
 51c:	83 32       	cpi	r24, 0x23	; 35
 51e:	a1 f4       	brne	.+40     	; 0x548 <vfprintf+0x98>
 520:	23 2d       	mov	r18, r3
 522:	20 61       	ori	r18, 0x10	; 16
 524:	1d c0       	rjmp	.+58     	; 0x560 <vfprintf+0xb0>
 526:	8d 32       	cpi	r24, 0x2D	; 45
 528:	61 f0       	breq	.+24     	; 0x542 <vfprintf+0x92>
 52a:	80 33       	cpi	r24, 0x30	; 48
 52c:	69 f4       	brne	.+26     	; 0x548 <vfprintf+0x98>
 52e:	23 2d       	mov	r18, r3
 530:	21 60       	ori	r18, 0x01	; 1
 532:	16 c0       	rjmp	.+44     	; 0x560 <vfprintf+0xb0>
 534:	83 2d       	mov	r24, r3
 536:	82 60       	ori	r24, 0x02	; 2
 538:	38 2e       	mov	r3, r24
 53a:	e3 2d       	mov	r30, r3
 53c:	e4 60       	ori	r30, 0x04	; 4
 53e:	3e 2e       	mov	r3, r30
 540:	2a c0       	rjmp	.+84     	; 0x596 <vfprintf+0xe6>
 542:	f3 2d       	mov	r31, r3
 544:	f8 60       	ori	r31, 0x08	; 8
 546:	1d c0       	rjmp	.+58     	; 0x582 <vfprintf+0xd2>
 548:	37 fc       	sbrc	r3, 7
 54a:	2d c0       	rjmp	.+90     	; 0x5a6 <vfprintf+0xf6>
 54c:	20 ed       	ldi	r18, 0xD0	; 208
 54e:	28 0f       	add	r18, r24
 550:	2a 30       	cpi	r18, 0x0A	; 10
 552:	40 f0       	brcs	.+16     	; 0x564 <vfprintf+0xb4>
 554:	8e 32       	cpi	r24, 0x2E	; 46
 556:	b9 f4       	brne	.+46     	; 0x586 <vfprintf+0xd6>
 558:	36 fc       	sbrc	r3, 6
 55a:	81 c1       	rjmp	.+770    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 55c:	23 2d       	mov	r18, r3
 55e:	20 64       	ori	r18, 0x40	; 64
 560:	32 2e       	mov	r3, r18
 562:	19 c0       	rjmp	.+50     	; 0x596 <vfprintf+0xe6>
 564:	36 fe       	sbrs	r3, 6
 566:	06 c0       	rjmp	.+12     	; 0x574 <vfprintf+0xc4>
 568:	8a e0       	ldi	r24, 0x0A	; 10
 56a:	98 9e       	mul	r9, r24
 56c:	20 0d       	add	r18, r0
 56e:	11 24       	eor	r1, r1
 570:	92 2e       	mov	r9, r18
 572:	11 c0       	rjmp	.+34     	; 0x596 <vfprintf+0xe6>
 574:	ea e0       	ldi	r30, 0x0A	; 10
 576:	2e 9e       	mul	r2, r30
 578:	20 0d       	add	r18, r0
 57a:	11 24       	eor	r1, r1
 57c:	22 2e       	mov	r2, r18
 57e:	f3 2d       	mov	r31, r3
 580:	f0 62       	ori	r31, 0x20	; 32
 582:	3f 2e       	mov	r3, r31
 584:	08 c0       	rjmp	.+16     	; 0x596 <vfprintf+0xe6>
 586:	8c 36       	cpi	r24, 0x6C	; 108
 588:	21 f4       	brne	.+8      	; 0x592 <vfprintf+0xe2>
 58a:	83 2d       	mov	r24, r3
 58c:	80 68       	ori	r24, 0x80	; 128
 58e:	38 2e       	mov	r3, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <vfprintf+0xe6>
 592:	88 36       	cpi	r24, 0x68	; 104
 594:	41 f4       	brne	.+16     	; 0x5a6 <vfprintf+0xf6>
 596:	f7 01       	movw	r30, r14
 598:	93 fd       	sbrc	r25, 3
 59a:	85 91       	lpm	r24, Z+
 59c:	93 ff       	sbrs	r25, 3
 59e:	81 91       	ld	r24, Z+
 5a0:	7f 01       	movw	r14, r30
 5a2:	81 11       	cpse	r24, r1
 5a4:	b3 cf       	rjmp	.-154    	; 0x50c <vfprintf+0x5c>
 5a6:	98 2f       	mov	r25, r24
 5a8:	9f 7d       	andi	r25, 0xDF	; 223
 5aa:	95 54       	subi	r25, 0x45	; 69
 5ac:	93 30       	cpi	r25, 0x03	; 3
 5ae:	28 f4       	brcc	.+10     	; 0x5ba <vfprintf+0x10a>
 5b0:	0c 5f       	subi	r16, 0xFC	; 252
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	9f e3       	ldi	r25, 0x3F	; 63
 5b6:	99 83       	std	Y+1, r25	; 0x01
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <vfprintf+0x124>
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	31 f0       	breq	.+12     	; 0x5ca <vfprintf+0x11a>
 5be:	83 37       	cpi	r24, 0x73	; 115
 5c0:	71 f0       	breq	.+28     	; 0x5de <vfprintf+0x12e>
 5c2:	83 35       	cpi	r24, 0x53	; 83
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <vfprintf+0x118>
 5c6:	59 c0       	rjmp	.+178    	; 0x67a <vfprintf+0x1ca>
 5c8:	21 c0       	rjmp	.+66     	; 0x60c <vfprintf+0x15c>
 5ca:	f8 01       	movw	r30, r16
 5cc:	80 81       	ld	r24, Z
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	0e 5f       	subi	r16, 0xFE	; 254
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	88 24       	eor	r8, r8
 5d6:	83 94       	inc	r8
 5d8:	91 2c       	mov	r9, r1
 5da:	53 01       	movw	r10, r6
 5dc:	13 c0       	rjmp	.+38     	; 0x604 <vfprintf+0x154>
 5de:	28 01       	movw	r4, r16
 5e0:	f2 e0       	ldi	r31, 0x02	; 2
 5e2:	4f 0e       	add	r4, r31
 5e4:	51 1c       	adc	r5, r1
 5e6:	f8 01       	movw	r30, r16
 5e8:	a0 80       	ld	r10, Z
 5ea:	b1 80       	ldd	r11, Z+1	; 0x01
 5ec:	36 fe       	sbrs	r3, 6
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <vfprintf+0x146>
 5f0:	69 2d       	mov	r22, r9
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <vfprintf+0x14a>
 5f6:	6f ef       	ldi	r22, 0xFF	; 255
 5f8:	7f ef       	ldi	r23, 0xFF	; 255
 5fa:	c5 01       	movw	r24, r10
 5fc:	0e 94 44 04 	call	0x888	; 0x888 <strnlen>
 600:	4c 01       	movw	r8, r24
 602:	82 01       	movw	r16, r4
 604:	f3 2d       	mov	r31, r3
 606:	ff 77       	andi	r31, 0x7F	; 127
 608:	3f 2e       	mov	r3, r31
 60a:	16 c0       	rjmp	.+44     	; 0x638 <vfprintf+0x188>
 60c:	28 01       	movw	r4, r16
 60e:	22 e0       	ldi	r18, 0x02	; 2
 610:	42 0e       	add	r4, r18
 612:	51 1c       	adc	r5, r1
 614:	f8 01       	movw	r30, r16
 616:	a0 80       	ld	r10, Z
 618:	b1 80       	ldd	r11, Z+1	; 0x01
 61a:	36 fe       	sbrs	r3, 6
 61c:	03 c0       	rjmp	.+6      	; 0x624 <vfprintf+0x174>
 61e:	69 2d       	mov	r22, r9
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0x178>
 624:	6f ef       	ldi	r22, 0xFF	; 255
 626:	7f ef       	ldi	r23, 0xFF	; 255
 628:	c5 01       	movw	r24, r10
 62a:	0e 94 39 04 	call	0x872	; 0x872 <strnlen_P>
 62e:	4c 01       	movw	r8, r24
 630:	f3 2d       	mov	r31, r3
 632:	f0 68       	ori	r31, 0x80	; 128
 634:	3f 2e       	mov	r3, r31
 636:	82 01       	movw	r16, r4
 638:	33 fc       	sbrc	r3, 3
 63a:	1b c0       	rjmp	.+54     	; 0x672 <vfprintf+0x1c2>
 63c:	82 2d       	mov	r24, r2
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	88 16       	cp	r8, r24
 642:	99 06       	cpc	r9, r25
 644:	b0 f4       	brcc	.+44     	; 0x672 <vfprintf+0x1c2>
 646:	b6 01       	movw	r22, r12
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 650:	2a 94       	dec	r2
 652:	f4 cf       	rjmp	.-24     	; 0x63c <vfprintf+0x18c>
 654:	f5 01       	movw	r30, r10
 656:	37 fc       	sbrc	r3, 7
 658:	85 91       	lpm	r24, Z+
 65a:	37 fe       	sbrs	r3, 7
 65c:	81 91       	ld	r24, Z+
 65e:	5f 01       	movw	r10, r30
 660:	b6 01       	movw	r22, r12
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 668:	21 10       	cpse	r2, r1
 66a:	2a 94       	dec	r2
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	82 1a       	sub	r8, r18
 670:	91 08       	sbc	r9, r1
 672:	81 14       	cp	r8, r1
 674:	91 04       	cpc	r9, r1
 676:	71 f7       	brne	.-36     	; 0x654 <vfprintf+0x1a4>
 678:	e8 c0       	rjmp	.+464    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 67a:	84 36       	cpi	r24, 0x64	; 100
 67c:	11 f0       	breq	.+4      	; 0x682 <vfprintf+0x1d2>
 67e:	89 36       	cpi	r24, 0x69	; 105
 680:	41 f5       	brne	.+80     	; 0x6d2 <vfprintf+0x222>
 682:	f8 01       	movw	r30, r16
 684:	37 fe       	sbrs	r3, 7
 686:	07 c0       	rjmp	.+14     	; 0x696 <vfprintf+0x1e6>
 688:	60 81       	ld	r22, Z
 68a:	71 81       	ldd	r23, Z+1	; 0x01
 68c:	82 81       	ldd	r24, Z+2	; 0x02
 68e:	93 81       	ldd	r25, Z+3	; 0x03
 690:	0c 5f       	subi	r16, 0xFC	; 252
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <vfprintf+0x1f6>
 696:	60 81       	ld	r22, Z
 698:	71 81       	ldd	r23, Z+1	; 0x01
 69a:	07 2e       	mov	r0, r23
 69c:	00 0c       	add	r0, r0
 69e:	88 0b       	sbc	r24, r24
 6a0:	99 0b       	sbc	r25, r25
 6a2:	0e 5f       	subi	r16, 0xFE	; 254
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	f3 2d       	mov	r31, r3
 6a8:	ff 76       	andi	r31, 0x6F	; 111
 6aa:	3f 2e       	mov	r3, r31
 6ac:	97 ff       	sbrs	r25, 7
 6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <vfprintf+0x212>
 6b0:	90 95       	com	r25
 6b2:	80 95       	com	r24
 6b4:	70 95       	com	r23
 6b6:	61 95       	neg	r22
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	f0 68       	ori	r31, 0x80	; 128
 6c0:	3f 2e       	mov	r3, r31
 6c2:	2a e0       	ldi	r18, 0x0A	; 10
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	a3 01       	movw	r20, r6
 6c8:	0e 94 8b 04 	call	0x916	; 0x916 <__ultoa_invert>
 6cc:	88 2e       	mov	r8, r24
 6ce:	86 18       	sub	r8, r6
 6d0:	45 c0       	rjmp	.+138    	; 0x75c <vfprintf+0x2ac>
 6d2:	85 37       	cpi	r24, 0x75	; 117
 6d4:	31 f4       	brne	.+12     	; 0x6e2 <vfprintf+0x232>
 6d6:	23 2d       	mov	r18, r3
 6d8:	2f 7e       	andi	r18, 0xEF	; 239
 6da:	b2 2e       	mov	r11, r18
 6dc:	2a e0       	ldi	r18, 0x0A	; 10
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	25 c0       	rjmp	.+74     	; 0x72c <vfprintf+0x27c>
 6e2:	93 2d       	mov	r25, r3
 6e4:	99 7f       	andi	r25, 0xF9	; 249
 6e6:	b9 2e       	mov	r11, r25
 6e8:	8f 36       	cpi	r24, 0x6F	; 111
 6ea:	c1 f0       	breq	.+48     	; 0x71c <vfprintf+0x26c>
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <vfprintf+0x244>
 6ee:	88 35       	cpi	r24, 0x58	; 88
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0x260>
 6f2:	b5 c0       	rjmp	.+362    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 6f4:	80 37       	cpi	r24, 0x70	; 112
 6f6:	19 f0       	breq	.+6      	; 0x6fe <vfprintf+0x24e>
 6f8:	88 37       	cpi	r24, 0x78	; 120
 6fa:	21 f0       	breq	.+8      	; 0x704 <vfprintf+0x254>
 6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 6fe:	e9 2f       	mov	r30, r25
 700:	e0 61       	ori	r30, 0x10	; 16
 702:	be 2e       	mov	r11, r30
 704:	b4 fe       	sbrs	r11, 4
 706:	0d c0       	rjmp	.+26     	; 0x722 <vfprintf+0x272>
 708:	fb 2d       	mov	r31, r11
 70a:	f4 60       	ori	r31, 0x04	; 4
 70c:	bf 2e       	mov	r11, r31
 70e:	09 c0       	rjmp	.+18     	; 0x722 <vfprintf+0x272>
 710:	34 fe       	sbrs	r3, 4
 712:	0a c0       	rjmp	.+20     	; 0x728 <vfprintf+0x278>
 714:	29 2f       	mov	r18, r25
 716:	26 60       	ori	r18, 0x06	; 6
 718:	b2 2e       	mov	r11, r18
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0x278>
 71c:	28 e0       	ldi	r18, 0x08	; 8
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	05 c0       	rjmp	.+10     	; 0x72c <vfprintf+0x27c>
 722:	20 e1       	ldi	r18, 0x10	; 16
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x27c>
 728:	20 e1       	ldi	r18, 0x10	; 16
 72a:	32 e0       	ldi	r19, 0x02	; 2
 72c:	f8 01       	movw	r30, r16
 72e:	b7 fe       	sbrs	r11, 7
 730:	07 c0       	rjmp	.+14     	; 0x740 <vfprintf+0x290>
 732:	60 81       	ld	r22, Z
 734:	71 81       	ldd	r23, Z+1	; 0x01
 736:	82 81       	ldd	r24, Z+2	; 0x02
 738:	93 81       	ldd	r25, Z+3	; 0x03
 73a:	0c 5f       	subi	r16, 0xFC	; 252
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	06 c0       	rjmp	.+12     	; 0x74c <vfprintf+0x29c>
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 5f       	subi	r16, 0xFE	; 254
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	a3 01       	movw	r20, r6
 74e:	0e 94 8b 04 	call	0x916	; 0x916 <__ultoa_invert>
 752:	88 2e       	mov	r8, r24
 754:	86 18       	sub	r8, r6
 756:	fb 2d       	mov	r31, r11
 758:	ff 77       	andi	r31, 0x7F	; 127
 75a:	3f 2e       	mov	r3, r31
 75c:	36 fe       	sbrs	r3, 6
 75e:	0d c0       	rjmp	.+26     	; 0x77a <vfprintf+0x2ca>
 760:	23 2d       	mov	r18, r3
 762:	2e 7f       	andi	r18, 0xFE	; 254
 764:	a2 2e       	mov	r10, r18
 766:	89 14       	cp	r8, r9
 768:	58 f4       	brcc	.+22     	; 0x780 <vfprintf+0x2d0>
 76a:	34 fe       	sbrs	r3, 4
 76c:	0b c0       	rjmp	.+22     	; 0x784 <vfprintf+0x2d4>
 76e:	32 fc       	sbrc	r3, 2
 770:	09 c0       	rjmp	.+18     	; 0x784 <vfprintf+0x2d4>
 772:	83 2d       	mov	r24, r3
 774:	8e 7e       	andi	r24, 0xEE	; 238
 776:	a8 2e       	mov	r10, r24
 778:	05 c0       	rjmp	.+10     	; 0x784 <vfprintf+0x2d4>
 77a:	b8 2c       	mov	r11, r8
 77c:	a3 2c       	mov	r10, r3
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x2d6>
 780:	b8 2c       	mov	r11, r8
 782:	01 c0       	rjmp	.+2      	; 0x786 <vfprintf+0x2d6>
 784:	b9 2c       	mov	r11, r9
 786:	a4 fe       	sbrs	r10, 4
 788:	0f c0       	rjmp	.+30     	; 0x7a8 <vfprintf+0x2f8>
 78a:	fe 01       	movw	r30, r28
 78c:	e8 0d       	add	r30, r8
 78e:	f1 1d       	adc	r31, r1
 790:	80 81       	ld	r24, Z
 792:	80 33       	cpi	r24, 0x30	; 48
 794:	21 f4       	brne	.+8      	; 0x79e <vfprintf+0x2ee>
 796:	9a 2d       	mov	r25, r10
 798:	99 7e       	andi	r25, 0xE9	; 233
 79a:	a9 2e       	mov	r10, r25
 79c:	09 c0       	rjmp	.+18     	; 0x7b0 <vfprintf+0x300>
 79e:	a2 fe       	sbrs	r10, 2
 7a0:	06 c0       	rjmp	.+12     	; 0x7ae <vfprintf+0x2fe>
 7a2:	b3 94       	inc	r11
 7a4:	b3 94       	inc	r11
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <vfprintf+0x300>
 7a8:	8a 2d       	mov	r24, r10
 7aa:	86 78       	andi	r24, 0x86	; 134
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <vfprintf+0x300>
 7ae:	b3 94       	inc	r11
 7b0:	a3 fc       	sbrc	r10, 3
 7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <vfprintf+0x326>
 7b4:	a0 fe       	sbrs	r10, 0
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0x314>
 7b8:	b2 14       	cp	r11, r2
 7ba:	88 f4       	brcc	.+34     	; 0x7de <vfprintf+0x32e>
 7bc:	28 0c       	add	r2, r8
 7be:	92 2c       	mov	r9, r2
 7c0:	9b 18       	sub	r9, r11
 7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <vfprintf+0x330>
 7c4:	b2 14       	cp	r11, r2
 7c6:	60 f4       	brcc	.+24     	; 0x7e0 <vfprintf+0x330>
 7c8:	b6 01       	movw	r22, r12
 7ca:	80 e2       	ldi	r24, 0x20	; 32
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 7d2:	b3 94       	inc	r11
 7d4:	f7 cf       	rjmp	.-18     	; 0x7c4 <vfprintf+0x314>
 7d6:	b2 14       	cp	r11, r2
 7d8:	18 f4       	brcc	.+6      	; 0x7e0 <vfprintf+0x330>
 7da:	2b 18       	sub	r2, r11
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x332>
 7de:	98 2c       	mov	r9, r8
 7e0:	21 2c       	mov	r2, r1
 7e2:	a4 fe       	sbrs	r10, 4
 7e4:	10 c0       	rjmp	.+32     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e6:	b6 01       	movw	r22, r12
 7e8:	80 e3       	ldi	r24, 0x30	; 48
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 7f0:	a2 fe       	sbrs	r10, 2
 7f2:	17 c0       	rjmp	.+46     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7f4:	a1 fc       	sbrc	r10, 1
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <vfprintf+0x34e>
 7f8:	88 e7       	ldi	r24, 0x78	; 120
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 e5       	ldi	r24, 0x58	; 88
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	b6 01       	movw	r22, r12
 804:	0c c0       	rjmp	.+24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 806:	8a 2d       	mov	r24, r10
 808:	86 78       	andi	r24, 0x86	; 134
 80a:	59 f0       	breq	.+22     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 80c:	a1 fe       	sbrs	r10, 1
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	8b e2       	ldi	r24, 0x2B	; 43
 812:	01 c0       	rjmp	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 814:	80 e2       	ldi	r24, 0x20	; 32
 816:	a7 fc       	sbrc	r10, 7
 818:	8d e2       	ldi	r24, 0x2D	; 45
 81a:	b6 01       	movw	r22, r12
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 822:	89 14       	cp	r8, r9
 824:	38 f4       	brcc	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 826:	b6 01       	movw	r22, r12
 828:	80 e3       	ldi	r24, 0x30	; 48
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 830:	9a 94       	dec	r9
 832:	f7 cf       	rjmp	.-18     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 834:	8a 94       	dec	r8
 836:	f3 01       	movw	r30, r6
 838:	e8 0d       	add	r30, r8
 83a:	f1 1d       	adc	r31, r1
 83c:	80 81       	ld	r24, Z
 83e:	b6 01       	movw	r22, r12
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 846:	81 10       	cpse	r8, r1
 848:	f5 cf       	rjmp	.-22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 84a:	22 20       	and	r2, r2
 84c:	09 f4       	brne	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	42 ce       	rjmp	.-892    	; 0x4d4 <vfprintf+0x24>
 850:	b6 01       	movw	r22, r12
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 4f 04 	call	0x89e	; 0x89e <fputc>
 85a:	2a 94       	dec	r2
 85c:	f6 cf       	rjmp	.-20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 85e:	f6 01       	movw	r30, r12
 860:	86 81       	ldd	r24, Z+6	; 0x06
 862:	97 81       	ldd	r25, Z+7	; 0x07
 864:	02 c0       	rjmp	.+4      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	9f ef       	ldi	r25, 0xFF	; 255
 86a:	2b 96       	adiw	r28, 0x0b	; 11
 86c:	e2 e1       	ldi	r30, 0x12	; 18
 86e:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__epilogue_restores__>

00000872 <strnlen_P>:
 872:	fc 01       	movw	r30, r24
 874:	05 90       	lpm	r0, Z+
 876:	61 50       	subi	r22, 0x01	; 1
 878:	70 40       	sbci	r23, 0x00	; 0
 87a:	01 10       	cpse	r0, r1
 87c:	d8 f7       	brcc	.-10     	; 0x874 <strnlen_P+0x2>
 87e:	80 95       	com	r24
 880:	90 95       	com	r25
 882:	8e 0f       	add	r24, r30
 884:	9f 1f       	adc	r25, r31
 886:	08 95       	ret

00000888 <strnlen>:
 888:	fc 01       	movw	r30, r24
 88a:	61 50       	subi	r22, 0x01	; 1
 88c:	70 40       	sbci	r23, 0x00	; 0
 88e:	01 90       	ld	r0, Z+
 890:	01 10       	cpse	r0, r1
 892:	d8 f7       	brcc	.-10     	; 0x88a <strnlen+0x2>
 894:	80 95       	com	r24
 896:	90 95       	com	r25
 898:	8e 0f       	add	r24, r30
 89a:	9f 1f       	adc	r25, r31
 89c:	08 95       	ret

0000089e <fputc>:
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	fb 01       	movw	r30, r22
 8a8:	23 81       	ldd	r18, Z+3	; 0x03
 8aa:	21 fd       	sbrc	r18, 1
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <fputc+0x16>
 8ae:	8f ef       	ldi	r24, 0xFF	; 255
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	2c c0       	rjmp	.+88     	; 0x90c <__stack+0xd>
 8b4:	22 ff       	sbrs	r18, 2
 8b6:	16 c0       	rjmp	.+44     	; 0x8e4 <fputc+0x46>
 8b8:	46 81       	ldd	r20, Z+6	; 0x06
 8ba:	57 81       	ldd	r21, Z+7	; 0x07
 8bc:	24 81       	ldd	r18, Z+4	; 0x04
 8be:	35 81       	ldd	r19, Z+5	; 0x05
 8c0:	42 17       	cp	r20, r18
 8c2:	53 07       	cpc	r21, r19
 8c4:	44 f4       	brge	.+16     	; 0x8d6 <fputc+0x38>
 8c6:	a0 81       	ld	r26, Z
 8c8:	b1 81       	ldd	r27, Z+1	; 0x01
 8ca:	9d 01       	movw	r18, r26
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	31 83       	std	Z+1, r19	; 0x01
 8d2:	20 83       	st	Z, r18
 8d4:	8c 93       	st	X, r24
 8d6:	26 81       	ldd	r18, Z+6	; 0x06
 8d8:	37 81       	ldd	r19, Z+7	; 0x07
 8da:	2f 5f       	subi	r18, 0xFF	; 255
 8dc:	3f 4f       	sbci	r19, 0xFF	; 255
 8de:	37 83       	std	Z+7, r19	; 0x07
 8e0:	26 83       	std	Z+6, r18	; 0x06
 8e2:	14 c0       	rjmp	.+40     	; 0x90c <__stack+0xd>
 8e4:	8b 01       	movw	r16, r22
 8e6:	ec 01       	movw	r28, r24
 8e8:	fb 01       	movw	r30, r22
 8ea:	00 84       	ldd	r0, Z+8	; 0x08
 8ec:	f1 85       	ldd	r31, Z+9	; 0x09
 8ee:	e0 2d       	mov	r30, r0
 8f0:	09 95       	icall
 8f2:	89 2b       	or	r24, r25
 8f4:	e1 f6       	brne	.-72     	; 0x8ae <fputc+0x10>
 8f6:	d8 01       	movw	r26, r16
 8f8:	16 96       	adiw	r26, 0x06	; 6
 8fa:	8d 91       	ld	r24, X+
 8fc:	9c 91       	ld	r25, X
 8fe:	17 97       	sbiw	r26, 0x07	; 7
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	17 96       	adiw	r26, 0x07	; 7
 904:	9c 93       	st	X, r25
 906:	8e 93       	st	-X, r24
 908:	16 97       	sbiw	r26, 0x06	; 6
 90a:	ce 01       	movw	r24, r28
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	08 95       	ret

00000916 <__ultoa_invert>:
 916:	fa 01       	movw	r30, r20
 918:	aa 27       	eor	r26, r26
 91a:	28 30       	cpi	r18, 0x08	; 8
 91c:	51 f1       	breq	.+84     	; 0x972 <__ultoa_invert+0x5c>
 91e:	20 31       	cpi	r18, 0x10	; 16
 920:	81 f1       	breq	.+96     	; 0x982 <__ultoa_invert+0x6c>
 922:	e8 94       	clt
 924:	6f 93       	push	r22
 926:	6e 7f       	andi	r22, 0xFE	; 254
 928:	6e 5f       	subi	r22, 0xFE	; 254
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	af 4f       	sbci	r26, 0xFF	; 255
 932:	b1 e0       	ldi	r27, 0x01	; 1
 934:	3e d0       	rcall	.+124    	; 0x9b2 <__ultoa_invert+0x9c>
 936:	b4 e0       	ldi	r27, 0x04	; 4
 938:	3c d0       	rcall	.+120    	; 0x9b2 <__ultoa_invert+0x9c>
 93a:	67 0f       	add	r22, r23
 93c:	78 1f       	adc	r23, r24
 93e:	89 1f       	adc	r24, r25
 940:	9a 1f       	adc	r25, r26
 942:	a1 1d       	adc	r26, r1
 944:	68 0f       	add	r22, r24
 946:	79 1f       	adc	r23, r25
 948:	8a 1f       	adc	r24, r26
 94a:	91 1d       	adc	r25, r1
 94c:	a1 1d       	adc	r26, r1
 94e:	6a 0f       	add	r22, r26
 950:	71 1d       	adc	r23, r1
 952:	81 1d       	adc	r24, r1
 954:	91 1d       	adc	r25, r1
 956:	a1 1d       	adc	r26, r1
 958:	20 d0       	rcall	.+64     	; 0x99a <__ultoa_invert+0x84>
 95a:	09 f4       	brne	.+2      	; 0x95e <__ultoa_invert+0x48>
 95c:	68 94       	set
 95e:	3f 91       	pop	r19
 960:	2a e0       	ldi	r18, 0x0A	; 10
 962:	26 9f       	mul	r18, r22
 964:	11 24       	eor	r1, r1
 966:	30 19       	sub	r19, r0
 968:	30 5d       	subi	r19, 0xD0	; 208
 96a:	31 93       	st	Z+, r19
 96c:	de f6       	brtc	.-74     	; 0x924 <__ultoa_invert+0xe>
 96e:	cf 01       	movw	r24, r30
 970:	08 95       	ret
 972:	46 2f       	mov	r20, r22
 974:	47 70       	andi	r20, 0x07	; 7
 976:	40 5d       	subi	r20, 0xD0	; 208
 978:	41 93       	st	Z+, r20
 97a:	b3 e0       	ldi	r27, 0x03	; 3
 97c:	0f d0       	rcall	.+30     	; 0x99c <__ultoa_invert+0x86>
 97e:	c9 f7       	brne	.-14     	; 0x972 <__ultoa_invert+0x5c>
 980:	f6 cf       	rjmp	.-20     	; 0x96e <__ultoa_invert+0x58>
 982:	46 2f       	mov	r20, r22
 984:	4f 70       	andi	r20, 0x0F	; 15
 986:	40 5d       	subi	r20, 0xD0	; 208
 988:	4a 33       	cpi	r20, 0x3A	; 58
 98a:	18 f0       	brcs	.+6      	; 0x992 <__ultoa_invert+0x7c>
 98c:	49 5d       	subi	r20, 0xD9	; 217
 98e:	31 fd       	sbrc	r19, 1
 990:	40 52       	subi	r20, 0x20	; 32
 992:	41 93       	st	Z+, r20
 994:	02 d0       	rcall	.+4      	; 0x99a <__ultoa_invert+0x84>
 996:	a9 f7       	brne	.-22     	; 0x982 <__ultoa_invert+0x6c>
 998:	ea cf       	rjmp	.-44     	; 0x96e <__ultoa_invert+0x58>
 99a:	b4 e0       	ldi	r27, 0x04	; 4
 99c:	a6 95       	lsr	r26
 99e:	97 95       	ror	r25
 9a0:	87 95       	ror	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	ba 95       	dec	r27
 9a8:	c9 f7       	brne	.-14     	; 0x99c <__ultoa_invert+0x86>
 9aa:	00 97       	sbiw	r24, 0x00	; 0
 9ac:	61 05       	cpc	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	08 95       	ret
 9b2:	9b 01       	movw	r18, r22
 9b4:	ac 01       	movw	r20, r24
 9b6:	0a 2e       	mov	r0, r26
 9b8:	06 94       	lsr	r0
 9ba:	57 95       	ror	r21
 9bc:	47 95       	ror	r20
 9be:	37 95       	ror	r19
 9c0:	27 95       	ror	r18
 9c2:	ba 95       	dec	r27
 9c4:	c9 f7       	brne	.-14     	; 0x9b8 <__ultoa_invert+0xa2>
 9c6:	62 0f       	add	r22, r18
 9c8:	73 1f       	adc	r23, r19
 9ca:	84 1f       	adc	r24, r20
 9cc:	95 1f       	adc	r25, r21
 9ce:	a0 1d       	adc	r26, r0
 9d0:	08 95       	ret

000009d2 <__prologue_saves__>:
 9d2:	2f 92       	push	r2
 9d4:	3f 92       	push	r3
 9d6:	4f 92       	push	r4
 9d8:	5f 92       	push	r5
 9da:	6f 92       	push	r6
 9dc:	7f 92       	push	r7
 9de:	8f 92       	push	r8
 9e0:	9f 92       	push	r9
 9e2:	af 92       	push	r10
 9e4:	bf 92       	push	r11
 9e6:	cf 92       	push	r12
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	ca 1b       	sub	r28, r26
 9fc:	db 0b       	sbc	r29, r27
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	09 94       	ijmp

00000a0a <__epilogue_restores__>:
 a0a:	2a 88       	ldd	r2, Y+18	; 0x12
 a0c:	39 88       	ldd	r3, Y+17	; 0x11
 a0e:	48 88       	ldd	r4, Y+16	; 0x10
 a10:	5f 84       	ldd	r5, Y+15	; 0x0f
 a12:	6e 84       	ldd	r6, Y+14	; 0x0e
 a14:	7d 84       	ldd	r7, Y+13	; 0x0d
 a16:	8c 84       	ldd	r8, Y+12	; 0x0c
 a18:	9b 84       	ldd	r9, Y+11	; 0x0b
 a1a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a1c:	b9 84       	ldd	r11, Y+9	; 0x09
 a1e:	c8 84       	ldd	r12, Y+8	; 0x08
 a20:	df 80       	ldd	r13, Y+7	; 0x07
 a22:	ee 80       	ldd	r14, Y+6	; 0x06
 a24:	fd 80       	ldd	r15, Y+5	; 0x05
 a26:	0c 81       	ldd	r16, Y+4	; 0x04
 a28:	1b 81       	ldd	r17, Y+3	; 0x03
 a2a:	aa 81       	ldd	r26, Y+2	; 0x02
 a2c:	b9 81       	ldd	r27, Y+1	; 0x01
 a2e:	ce 0f       	add	r28, r30
 a30:	d1 1d       	adc	r29, r1
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	f8 94       	cli
 a36:	de bf       	out	0x3e, r29	; 62
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	cd bf       	out	0x3d, r28	; 61
 a3c:	ed 01       	movw	r28, r26
 a3e:	08 95       	ret

00000a40 <_exit>:
 a40:	f8 94       	cli

00000a42 <__stop_program>:
 a42:	ff cf       	rjmp	.-2      	; 0xa42 <__stop_program>
