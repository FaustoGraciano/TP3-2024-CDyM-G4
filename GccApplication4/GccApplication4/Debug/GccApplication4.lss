
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000ae4  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800152  00800152  00000bca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e7  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e3  00000000  00000000  00003bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bc  00000000  00000000  000042af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004a6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  9e:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LeerDHT>:


static uint8_t humedad;
static uint8_t temperatura;

int LeerDHT(uint8_t pin) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <LeerDHT+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <LeerDHT+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
 // Recepción de datos
	uint8_t data[5] = {0};
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	df 01       	movw	r26, r30
  bc:	1d 92       	st	X+, r1
  be:	8a 95       	dec	r24
  c0:	e9 f7       	brne	.-6      	; 0xbc <LeerDHT+0x16>
	DDRC|=(1<<PINC0);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 b9       	out	0x07, r24	; 7
	PORTC|= (1<<PINC0);
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LeerDHT+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LeerDHT+0x32>
  d8:	00 00       	nop
	_delay_ms(1);
	PORTC&= ~(1<<PINC0);
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	88 b9       	out	0x08, r24	; 8
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	a9 ef       	ldi	r26, 0xF9	; 249
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	a0 40       	sbci	r26, 0x00	; 0
  ea:	b0 40       	sbci	r27, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LeerDHT+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LeerDHT+0x4a>
  f0:	00 00       	nop
	_delay_ms(20);
	PORTC|=(1<<PINC0);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	88 b9       	out	0x08, r24	; 8
	DDRC&=~(1<<PINC0);
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	87 b9       	out	0x07, r24	; 7

   	while((PINC & (1<<PINC0))){
  fe:	30 99       	sbic	0x06, 0	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <LeerDHT+0x58>
	   	// Esperar hasta que el pin se vuelva bajo
   	}
   	
   	while(!(PINC & (1<<PINC0))){
 102:	30 9b       	sbis	0x06, 0	; 6
 104:	fe cf       	rjmp	.-4      	; 0x102 <LeerDHT+0x5c>
	   	// Esperar hasta que el pin se vuelva alto
   	}
   	
   	while((PINC & (1<<PINC0))){
 106:	30 99       	sbic	0x06, 0	; 6
 108:	fe cf       	rjmp	.-4      	; 0x106 <LeerDHT+0x60>
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	22 c0       	rjmp	.+68     	; 0x154 <LeerDHT+0xae>
   	}

	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
			
			while(!(PINC & (1<<PINC0))){
 110:	30 9b       	sbis	0x06, 0	; 6
 112:	fe cf       	rjmp	.-4      	; 0x110 <LeerDHT+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	20 ea       	ldi	r18, 0xA0	; 160
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <LeerDHT+0x70>
				// Esperar hasta que el pin se vuelva alto
			}
			
			_delay_us(30);
			if((PINC & (1<<PINC0))){
 11a:	30 9b       	sbis	0x06, 0	; 6
 11c:	11 c0       	rjmp	.+34     	; 0x140 <LeerDHT+0x9a>
				data[i] |= (1 << j); // Si la duración es mayor a 40us, el bit es un 1
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	08 2e       	mov	r0, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <LeerDHT+0x84>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <LeerDHT+0x80>
 12e:	e1 e0       	ldi	r30, 0x01	; 1
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ec 0f       	add	r30, r28
 134:	fd 1f       	adc	r31, r29
 136:	e4 0f       	add	r30, r20
 138:	f5 1f       	adc	r31, r21
 13a:	30 81       	ld	r19, Z
 13c:	23 2b       	or	r18, r19
 13e:	20 83       	st	Z, r18
			}
			
			while((PINC & (1<<PINC0))){
 140:	30 99       	sbic	0x06, 0	; 6
 142:	fe cf       	rjmp	.-4      	; 0x140 <LeerDHT+0x9a>
   	while((PINC & (1<<PINC0))){
	   	// Esperar hasta que el pin se vuelva bajo
   	}

	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	02 c0       	rjmp	.+4      	; 0x14c <LeerDHT+0xa6>
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	99 23       	and	r25, r25
 14e:	04 f7       	brge	.-64     	; 0x110 <LeerDHT+0x6a>
   	
   	while((PINC & (1<<PINC0))){
	   	// Esperar hasta que el pin se vuelva bajo
   	}

	for (int i = 0; i < 5; i++) {
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	45 30       	cpi	r20, 0x05	; 5
 156:	51 05       	cpc	r21, r1
 158:	bc f3       	brlt	.-18     	; 0x148 <LeerDHT+0xa2>
			
		}
	}

	// Verificar checksum
	if (data[4] == ((data[0] + data[1] + data[2] + data[3]))) {
 15a:	2d 81       	ldd	r18, Y+5	; 0x05
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	59 81       	ldd	r21, Y+1	; 0x01
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	85 0f       	add	r24, r21
 166:	91 1d       	adc	r25, r1
 168:	4b 81       	ldd	r20, Y+3	; 0x03
 16a:	84 0f       	add	r24, r20
 16c:	91 1d       	adc	r25, r1
 16e:	6c 81       	ldd	r22, Y+4	; 0x04
 170:	86 0f       	add	r24, r22
 172:	91 1d       	adc	r25, r1
 174:	28 17       	cp	r18, r24
 176:	39 07       	cpc	r19, r25
 178:	39 f4       	brne	.+14     	; 0x188 <LeerDHT+0xe2>
		// Decodificar datos
		humedad = data[0];
 17a:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <humedad>
		temperatura = data[2];
 17e:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <__data_end>
		return DHTLIB_OK; // Lectura exitosa
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <LeerDHT+0xe6>
		} else {
		return DHTLIB_ERROR_CHECKSUM; // Error de checksum
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <getHumedad>:

uint8_t getHumedad() {
	return humedad;
}
 19c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <humedad>
 1a0:	08 95       	ret

000001a2 <getTemperatura>:

uint8_t getTemperatura() {
	return temperatura;
 1a2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 1a6:	08 95       	ret

000001a8 <main>:
		Flag_MEF = 0;
		return 1;
		} else {
		return 0;
	}
}
 1a8:	0e 94 83 01 	call	0x306	; 0x306 <RTC_Init>
 1ac:	87 e6       	ldi	r24, 0x67	; 103
 1ae:	0e 94 27 02 	call	0x44e	; 0x44e <SerialPort_Init>
 1b2:	0e 94 31 02 	call	0x462	; 0x462 <SerialPort_TX_Enable>
 1b6:	0e 94 37 02 	call	0x46e	; 0x46e <SerialPort_RX_Enable>
 1ba:	0e 94 3d 02 	call	0x47a	; 0x47a <SerialPort_RX_Interrupt_Enable>
 1be:	78 94       	sei
 1c0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <suspendFlag>
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <main+0x18>
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <LeerDHT>
 1cc:	89 2b       	or	r24, r25
 1ce:	81 f5       	brne	.+96     	; 0x230 <main+0x88>
 1d0:	87 e1       	ldi	r24, 0x17	; 23
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 1d8:	0e 94 ce 00 	call	0x19c	; 0x19c <getHumedad>
 1dc:	0e 94 67 02 	call	0x4ce	; 0x4ce <SerialPort_Send_uint8_t>
 1e0:	83 e1       	ldi	r24, 0x13	; 19
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 1f0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <getTemperatura>
 1f4:	0e 94 67 02 	call	0x4ce	; 0x4ce <SerialPort_Send_uint8_t>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 200:	89 e5       	ldi	r24, 0x59	; 89
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 c9 01 	call	0x392	; 0x392 <RTC_GetDate>
 208:	82 e2       	ldi	r24, 0x22	; 34
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 210:	89 e5       	ldi	r24, 0x59	; 89
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 218:	86 e5       	ldi	r24, 0x56	; 86
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 86 01 	call	0x30c	; 0x30c <RTC_GetTime>
 220:	8b e2       	ldi	r24, 0x2B	; 43
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 228:	86 e5       	ldi	r24, 0x56	; 86
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Send_String>
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	87 ea       	ldi	r24, 0xA7	; 167
 234:	91 e6       	ldi	r25, 0x61	; 97
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x8e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x98>
 240:	00 00       	nop
 242:	be cf       	rjmp	.-132    	; 0x1c0 <main+0x18>

00000244 <__vector_11>:

// ISR del TIMER1
ISR(TIMER1_COMPA_vect) {
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
	countMEF++;    // Incremento del contador para la Flag
 252:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <countMEF>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <countMEF>
	count2++;
 25c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <count2>
 260:	9f 5f       	subi	r25, 0xFF	; 255
 262:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <count2>
	if (countMEF == 20) {   // Cada 10 interrupciones se activa el FLAG de chequeo de MEF
 266:	84 31       	cpi	r24, 0x14	; 20
 268:	29 f4       	brne	.+10     	; 0x274 <__vector_11+0x30>
		Flag_MEF = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Flag_MEF>
		countMEF = 0;
 270:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <countMEF>
	}
	if (count2 == 2000) {
		Flag_tiempo = 1;
		count2 = 0;
	}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <bcdToDec>:
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
	I2C_Write(0x04); // Dirección de registro de fecha
	I2C_Write(0x10);
	I2C_Write(0x06);
	I2C_Write(0x24);
	I2C_Stop();
 282:	98 2f       	mov	r25, r24
 284:	92 95       	swap	r25
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	99 0f       	add	r25, r25
 28a:	29 2f       	mov	r18, r25
 28c:	22 0f       	add	r18, r18
 28e:	22 0f       	add	r18, r18
 290:	92 0f       	add	r25, r18
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	89 0f       	add	r24, r25
 296:	08 95       	ret

00000298 <I2C_Init>:
 298:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a8:	08 95       	ret

000002aa <I2C_Start>:
 2aa:	84 ea       	ldi	r24, 0xA4	; 164
 2ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b4:	88 23       	and	r24, r24
 2b6:	e4 f7       	brge	.-8      	; 0x2b0 <I2C_Start+0x6>
 2b8:	08 95       	ret

000002ba <I2C_Stop>:
 2ba:	84 e9       	ldi	r24, 0x94	; 148
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	84 fd       	sbrc	r24, 4
 2c6:	fc cf       	rjmp	.-8      	; 0x2c0 <I2C_Stop+0x6>
 2c8:	08 95       	ret

000002ca <I2C_Write>:
 2ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2ce:	84 e8       	ldi	r24, 0x84	; 132
 2d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d8:	88 23       	and	r24, r24
 2da:	e4 f7       	brge	.-8      	; 0x2d4 <I2C_Write+0xa>
 2dc:	08 95       	ret

000002de <I2C_ReadAck>:
 2de:	84 ec       	ldi	r24, 0xC4	; 196
 2e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e8:	88 23       	and	r24, r24
 2ea:	e4 f7       	brge	.-8      	; 0x2e4 <I2C_ReadAck+0x6>
 2ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2f0:	08 95       	ret

000002f2 <I2C_ReadNack>:
 2f2:	84 e8       	ldi	r24, 0x84	; 132
 2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2fc:	88 23       	and	r24, r24
 2fe:	e4 f7       	brge	.-8      	; 0x2f8 <I2C_ReadNack+0x6>
 300:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 304:	08 95       	ret

00000306 <RTC_Init>:
 306:	0e 94 4c 01 	call	0x298	; 0x298 <I2C_Init>
 30a:	08 95       	ret

0000030c <RTC_GetTime>:
	
}

void RTC_GetTime(char* timeStr) {
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	c8 2f       	mov	r28, r24
 318:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x00 (segundos)
	I2C_Start();
 31a:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 31e:	80 ed       	ldi	r24, 0xD0	; 208
 320:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	I2C_Write(0x00); // Dirección de registro de segundos
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	I2C_Stop();
 32a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <I2C_Stop>

	// Leer tiempo (segundos, minutos, horas)
	I2C_Start();
 32e:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 332:	81 ed       	ldi	r24, 0xD1	; 209
 334:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	uint8_t seconds = bcdToDec(I2C_ReadAck());
 338:	0e 94 6f 01 	call	0x2de	; 0x2de <I2C_ReadAck>
 33c:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 340:	f8 2e       	mov	r15, r24
	uint8_t minutes = bcdToDec(I2C_ReadAck());
 342:	0e 94 6f 01 	call	0x2de	; 0x2de <I2C_ReadAck>
 346:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 34a:	08 2f       	mov	r16, r24
	uint8_t hours = bcdToDec(I2C_ReadNack());
 34c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <I2C_ReadNack>
 350:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 354:	18 2f       	mov	r17, r24
	I2C_Stop();
 356:	0e 94 5d 01 	call	0x2ba	; 0x2ba <I2C_Stop>

	// Formatear hora
	sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
 35a:	1f 92       	push	r1
 35c:	ff 92       	push	r15
 35e:	1f 92       	push	r1
 360:	0f 93       	push	r16
 362:	1f 92       	push	r1
 364:	1f 93       	push	r17
 366:	83 e3       	ldi	r24, 0x33	; 51
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	9f 93       	push	r25
 36c:	8f 93       	push	r24
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	0e 94 86 02 	call	0x50c	; 0x50c <sprintf>
}
 376:	8d b7       	in	r24, 0x3d	; 61
 378:	9e b7       	in	r25, 0x3e	; 62
 37a:	0a 96       	adiw	r24, 0x0a	; 10
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	9e bf       	out	0x3e, r25	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	8d bf       	out	0x3d, r24	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	08 95       	ret

00000392 <RTC_GetDate>:

void RTC_GetDate(char* dateStr) {
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	c8 2f       	mov	r28, r24
 39e:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x04 (día del mes)
	I2C_Start();
 3a0:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 3a4:	80 ed       	ldi	r24, 0xD0	; 208
 3a6:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	I2C_Write(0x04); // Dirección de registro de día del mes
 3aa:	84 e0       	ldi	r24, 0x04	; 4
 3ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	I2C_Stop();
 3b0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <I2C_Stop>

	// Leer fecha (día, mes, año)
	I2C_Start();
 3b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 3b8:	81 ed       	ldi	r24, 0xD1	; 209
 3ba:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Write>
	uint8_t day = bcdToDec(I2C_ReadAck());
 3be:	0e 94 6f 01 	call	0x2de	; 0x2de <I2C_ReadAck>
 3c2:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 3c6:	18 2f       	mov	r17, r24
	uint8_t month = bcdToDec(I2C_ReadAck());
 3c8:	0e 94 6f 01 	call	0x2de	; 0x2de <I2C_ReadAck>
 3cc:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 3d0:	08 2f       	mov	r16, r24
	uint8_t year = bcdToDec(I2C_ReadNack());
 3d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <I2C_ReadNack>
 3d6:	0e 94 41 01 	call	0x282	; 0x282 <bcdToDec>
 3da:	f8 2e       	mov	r15, r24
	I2C_Stop();
 3dc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <I2C_Stop>

	// Formatear fecha
	sprintf(dateStr, "%02d/%02d/%02d", day, month, year);
 3e0:	1f 92       	push	r1
 3e2:	ff 92       	push	r15
 3e4:	1f 92       	push	r1
 3e6:	0f 93       	push	r16
 3e8:	1f 92       	push	r1
 3ea:	1f 93       	push	r17
 3ec:	82 e4       	ldi	r24, 0x42	; 66
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	9f 93       	push	r25
 3f2:	8f 93       	push	r24
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	0e 94 86 02 	call	0x50c	; 0x50c <sprintf>
}
 3fc:	8d b7       	in	r24, 0x3d	; 61
 3fe:	9e b7       	in	r25, 0x3e	; 62
 400:	0a 96       	adiw	r24, 0x0a	; 10
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	9e bf       	out	0x3e, r25	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	8d bf       	out	0x3d, r24	; 61
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	08 95       	ret

00000418 <__vector_18>:
}


char SerialPort_Recive_Data(void){
	return UDR0;
}
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 42a:	83 37       	cpi	r24, 0x73	; 115
 42c:	11 f0       	breq	.+4      	; 0x432 <__vector_18+0x1a>
 42e:	83 35       	cpi	r24, 0x53	; 83
 430:	39 f4       	brne	.+14     	; 0x440 <__vector_18+0x28>
 432:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <suspendFlag>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	91 11       	cpse	r25, r1
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <suspendFlag>
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <SerialPort_Init>:
 44e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 452:	96 e0       	ldi	r25, 0x06	; 6
 454:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 458:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 45c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 460:	08 95       	ret

00000462 <SerialPort_TX_Enable>:
 462:	e1 ec       	ldi	r30, 0xC1	; 193
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 60       	ori	r24, 0x08	; 8
 46a:	80 83       	st	Z, r24
 46c:	08 95       	ret

0000046e <SerialPort_RX_Enable>:
 46e:	e1 ec       	ldi	r30, 0xC1	; 193
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	80 61       	ori	r24, 0x10	; 16
 476:	80 83       	st	Z, r24
 478:	08 95       	ret

0000047a <SerialPort_RX_Interrupt_Enable>:
 47a:	e1 ec       	ldi	r30, 0xC1	; 193
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 68       	ori	r24, 0x80	; 128
 482:	80 83       	st	Z, r24
 484:	08 95       	ret

00000486 <SerialPort_Wait_For_TX_Buffer_Free>:
 486:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 48a:	85 ff       	sbrs	r24, 5
 48c:	fc cf       	rjmp	.-8      	; 0x486 <SerialPort_Wait_For_TX_Buffer_Free>
 48e:	08 95       	ret

00000490 <SerialPort_Send_Data>:
 490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 494:	08 95       	ret

00000496 <SerialPort_Send_String>:
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	7c 01       	movw	r14, r24
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <SerialPort_Send_String+0x1e>
 4a6:	0e 94 43 02 	call	0x486	; 0x486 <SerialPort_Wait_For_TX_Buffer_Free>
 4aa:	f8 01       	movw	r30, r16
 4ac:	80 81       	ld	r24, Z
 4ae:	0e 94 48 02 	call	0x490	; 0x490 <SerialPort_Send_Data>
 4b2:	cf 5f       	subi	r28, 0xFF	; 255
 4b4:	87 01       	movw	r16, r14
 4b6:	0c 0f       	add	r16, r28
 4b8:	11 1d       	adc	r17, r1
 4ba:	f8 01       	movw	r30, r16
 4bc:	80 81       	ld	r24, Z
 4be:	81 11       	cpse	r24, r1
 4c0:	f2 cf       	rjmp	.-28     	; 0x4a6 <SerialPort_Send_String+0x10>
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <SerialPort_Send_uint8_t>:


void SerialPort_Send_uint8_t(uint8_t num){
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	d8 2f       	mov	r29, r24
	
	SerialPort_Wait_For_TX_Buffer_Free();
 4d4:	0e 94 43 02 	call	0x486	; 0x486 <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+num/10);
 4d8:	cd ec       	ldi	r28, 0xCD	; 205
 4da:	dc 9f       	mul	r29, r28
 4dc:	c1 2d       	mov	r28, r1
 4de:	11 24       	eor	r1, r1
 4e0:	c6 95       	lsr	r28
 4e2:	c6 95       	lsr	r28
 4e4:	c6 95       	lsr	r28
 4e6:	80 e3       	ldi	r24, 0x30	; 48
 4e8:	8c 0f       	add	r24, r28
 4ea:	0e 94 48 02 	call	0x490	; 0x490 <SerialPort_Send_Data>
	
	SerialPort_Wait_For_TX_Buffer_Free();
 4ee:	0e 94 43 02 	call	0x486	; 0x486 <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+ num%10);
 4f2:	cc 0f       	add	r28, r28
 4f4:	8c 2f       	mov	r24, r28
 4f6:	88 0f       	add	r24, r24
 4f8:	88 0f       	add	r24, r24
 4fa:	c8 0f       	add	r28, r24
 4fc:	8d 2f       	mov	r24, r29
 4fe:	8c 1b       	sub	r24, r28
 500:	80 5d       	subi	r24, 0xD0	; 208
 502:	0e 94 48 02 	call	0x490	; 0x490 <SerialPort_Send_Data>
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <sprintf>:
 50c:	ae e0       	ldi	r26, 0x0E	; 14
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	ec e8       	ldi	r30, 0x8C	; 140
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__prologue_saves__+0x1c>
 518:	0d 89       	ldd	r16, Y+21	; 0x15
 51a:	1e 89       	ldd	r17, Y+22	; 0x16
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	8c 83       	std	Y+4, r24	; 0x04
 520:	1a 83       	std	Y+2, r17	; 0x02
 522:	09 83       	std	Y+1, r16	; 0x01
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	9f e7       	ldi	r25, 0x7F	; 127
 528:	9e 83       	std	Y+6, r25	; 0x06
 52a:	8d 83       	std	Y+5, r24	; 0x05
 52c:	ae 01       	movw	r20, r28
 52e:	47 5e       	subi	r20, 0xE7	; 231
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	6f 89       	ldd	r22, Y+23	; 0x17
 534:	78 8d       	ldd	r23, Y+24	; 0x18
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	0e 94 a8 02 	call	0x550	; 0x550 <vfprintf>
 53e:	ef 81       	ldd	r30, Y+7	; 0x07
 540:	f8 85       	ldd	r31, Y+8	; 0x08
 542:	e0 0f       	add	r30, r16
 544:	f1 1f       	adc	r31, r17
 546:	10 82       	st	Z, r1
 548:	2e 96       	adiw	r28, 0x0e	; 14
 54a:	e4 e0       	ldi	r30, 0x04	; 4
 54c:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__epilogue_restores__+0x1c>

00000550 <vfprintf>:
 550:	ab e0       	ldi	r26, 0x0B	; 11
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	ee ea       	ldi	r30, 0xAE	; 174
 556:	f2 e0       	ldi	r31, 0x02	; 2
 558:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__prologue_saves__>
 55c:	6c 01       	movw	r12, r24
 55e:	7b 01       	movw	r14, r22
 560:	8a 01       	movw	r16, r20
 562:	fc 01       	movw	r30, r24
 564:	17 82       	std	Z+7, r1	; 0x07
 566:	16 82       	std	Z+6, r1	; 0x06
 568:	83 81       	ldd	r24, Z+3	; 0x03
 56a:	81 ff       	sbrs	r24, 1
 56c:	cc c1       	rjmp	.+920    	; 0x906 <__stack+0x7>
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	3c 01       	movw	r6, r24
 574:	f6 01       	movw	r30, r12
 576:	93 81       	ldd	r25, Z+3	; 0x03
 578:	f7 01       	movw	r30, r14
 57a:	93 fd       	sbrc	r25, 3
 57c:	85 91       	lpm	r24, Z+
 57e:	93 ff       	sbrs	r25, 3
 580:	81 91       	ld	r24, Z+
 582:	7f 01       	movw	r14, r30
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <vfprintf+0x3a>
 588:	ba c1       	rjmp	.+884    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 58a:	85 32       	cpi	r24, 0x25	; 37
 58c:	39 f4       	brne	.+14     	; 0x59c <vfprintf+0x4c>
 58e:	93 fd       	sbrc	r25, 3
 590:	85 91       	lpm	r24, Z+
 592:	93 ff       	sbrs	r25, 3
 594:	81 91       	ld	r24, Z+
 596:	7f 01       	movw	r14, r30
 598:	85 32       	cpi	r24, 0x25	; 37
 59a:	29 f4       	brne	.+10     	; 0x5a6 <vfprintf+0x56>
 59c:	b6 01       	movw	r22, r12
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 5a4:	e7 cf       	rjmp	.-50     	; 0x574 <vfprintf+0x24>
 5a6:	91 2c       	mov	r9, r1
 5a8:	21 2c       	mov	r2, r1
 5aa:	31 2c       	mov	r3, r1
 5ac:	ff e1       	ldi	r31, 0x1F	; 31
 5ae:	f3 15       	cp	r31, r3
 5b0:	d8 f0       	brcs	.+54     	; 0x5e8 <vfprintf+0x98>
 5b2:	8b 32       	cpi	r24, 0x2B	; 43
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <vfprintf+0x84>
 5b6:	38 f4       	brcc	.+14     	; 0x5c6 <vfprintf+0x76>
 5b8:	80 32       	cpi	r24, 0x20	; 32
 5ba:	79 f0       	breq	.+30     	; 0x5da <vfprintf+0x8a>
 5bc:	83 32       	cpi	r24, 0x23	; 35
 5be:	a1 f4       	brne	.+40     	; 0x5e8 <vfprintf+0x98>
 5c0:	23 2d       	mov	r18, r3
 5c2:	20 61       	ori	r18, 0x10	; 16
 5c4:	1d c0       	rjmp	.+58     	; 0x600 <vfprintf+0xb0>
 5c6:	8d 32       	cpi	r24, 0x2D	; 45
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <vfprintf+0x92>
 5ca:	80 33       	cpi	r24, 0x30	; 48
 5cc:	69 f4       	brne	.+26     	; 0x5e8 <vfprintf+0x98>
 5ce:	23 2d       	mov	r18, r3
 5d0:	21 60       	ori	r18, 0x01	; 1
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <vfprintf+0xb0>
 5d4:	83 2d       	mov	r24, r3
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	38 2e       	mov	r3, r24
 5da:	e3 2d       	mov	r30, r3
 5dc:	e4 60       	ori	r30, 0x04	; 4
 5de:	3e 2e       	mov	r3, r30
 5e0:	2a c0       	rjmp	.+84     	; 0x636 <vfprintf+0xe6>
 5e2:	f3 2d       	mov	r31, r3
 5e4:	f8 60       	ori	r31, 0x08	; 8
 5e6:	1d c0       	rjmp	.+58     	; 0x622 <vfprintf+0xd2>
 5e8:	37 fc       	sbrc	r3, 7
 5ea:	2d c0       	rjmp	.+90     	; 0x646 <vfprintf+0xf6>
 5ec:	20 ed       	ldi	r18, 0xD0	; 208
 5ee:	28 0f       	add	r18, r24
 5f0:	2a 30       	cpi	r18, 0x0A	; 10
 5f2:	40 f0       	brcs	.+16     	; 0x604 <vfprintf+0xb4>
 5f4:	8e 32       	cpi	r24, 0x2E	; 46
 5f6:	b9 f4       	brne	.+46     	; 0x626 <vfprintf+0xd6>
 5f8:	36 fc       	sbrc	r3, 6
 5fa:	81 c1       	rjmp	.+770    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 5fc:	23 2d       	mov	r18, r3
 5fe:	20 64       	ori	r18, 0x40	; 64
 600:	32 2e       	mov	r3, r18
 602:	19 c0       	rjmp	.+50     	; 0x636 <vfprintf+0xe6>
 604:	36 fe       	sbrs	r3, 6
 606:	06 c0       	rjmp	.+12     	; 0x614 <vfprintf+0xc4>
 608:	8a e0       	ldi	r24, 0x0A	; 10
 60a:	98 9e       	mul	r9, r24
 60c:	20 0d       	add	r18, r0
 60e:	11 24       	eor	r1, r1
 610:	92 2e       	mov	r9, r18
 612:	11 c0       	rjmp	.+34     	; 0x636 <vfprintf+0xe6>
 614:	ea e0       	ldi	r30, 0x0A	; 10
 616:	2e 9e       	mul	r2, r30
 618:	20 0d       	add	r18, r0
 61a:	11 24       	eor	r1, r1
 61c:	22 2e       	mov	r2, r18
 61e:	f3 2d       	mov	r31, r3
 620:	f0 62       	ori	r31, 0x20	; 32
 622:	3f 2e       	mov	r3, r31
 624:	08 c0       	rjmp	.+16     	; 0x636 <vfprintf+0xe6>
 626:	8c 36       	cpi	r24, 0x6C	; 108
 628:	21 f4       	brne	.+8      	; 0x632 <vfprintf+0xe2>
 62a:	83 2d       	mov	r24, r3
 62c:	80 68       	ori	r24, 0x80	; 128
 62e:	38 2e       	mov	r3, r24
 630:	02 c0       	rjmp	.+4      	; 0x636 <vfprintf+0xe6>
 632:	88 36       	cpi	r24, 0x68	; 104
 634:	41 f4       	brne	.+16     	; 0x646 <vfprintf+0xf6>
 636:	f7 01       	movw	r30, r14
 638:	93 fd       	sbrc	r25, 3
 63a:	85 91       	lpm	r24, Z+
 63c:	93 ff       	sbrs	r25, 3
 63e:	81 91       	ld	r24, Z+
 640:	7f 01       	movw	r14, r30
 642:	81 11       	cpse	r24, r1
 644:	b3 cf       	rjmp	.-154    	; 0x5ac <vfprintf+0x5c>
 646:	98 2f       	mov	r25, r24
 648:	9f 7d       	andi	r25, 0xDF	; 223
 64a:	95 54       	subi	r25, 0x45	; 69
 64c:	93 30       	cpi	r25, 0x03	; 3
 64e:	28 f4       	brcc	.+10     	; 0x65a <vfprintf+0x10a>
 650:	0c 5f       	subi	r16, 0xFC	; 252
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	9f e3       	ldi	r25, 0x3F	; 63
 656:	99 83       	std	Y+1, r25	; 0x01
 658:	0d c0       	rjmp	.+26     	; 0x674 <vfprintf+0x124>
 65a:	83 36       	cpi	r24, 0x63	; 99
 65c:	31 f0       	breq	.+12     	; 0x66a <vfprintf+0x11a>
 65e:	83 37       	cpi	r24, 0x73	; 115
 660:	71 f0       	breq	.+28     	; 0x67e <vfprintf+0x12e>
 662:	83 35       	cpi	r24, 0x53	; 83
 664:	09 f0       	breq	.+2      	; 0x668 <vfprintf+0x118>
 666:	59 c0       	rjmp	.+178    	; 0x71a <vfprintf+0x1ca>
 668:	21 c0       	rjmp	.+66     	; 0x6ac <vfprintf+0x15c>
 66a:	f8 01       	movw	r30, r16
 66c:	80 81       	ld	r24, Z
 66e:	89 83       	std	Y+1, r24	; 0x01
 670:	0e 5f       	subi	r16, 0xFE	; 254
 672:	1f 4f       	sbci	r17, 0xFF	; 255
 674:	88 24       	eor	r8, r8
 676:	83 94       	inc	r8
 678:	91 2c       	mov	r9, r1
 67a:	53 01       	movw	r10, r6
 67c:	13 c0       	rjmp	.+38     	; 0x6a4 <vfprintf+0x154>
 67e:	28 01       	movw	r4, r16
 680:	f2 e0       	ldi	r31, 0x02	; 2
 682:	4f 0e       	add	r4, r31
 684:	51 1c       	adc	r5, r1
 686:	f8 01       	movw	r30, r16
 688:	a0 80       	ld	r10, Z
 68a:	b1 80       	ldd	r11, Z+1	; 0x01
 68c:	36 fe       	sbrs	r3, 6
 68e:	03 c0       	rjmp	.+6      	; 0x696 <vfprintf+0x146>
 690:	69 2d       	mov	r22, r9
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0x14a>
 696:	6f ef       	ldi	r22, 0xFF	; 255
 698:	7f ef       	ldi	r23, 0xFF	; 255
 69a:	c5 01       	movw	r24, r10
 69c:	0e 94 94 04 	call	0x928	; 0x928 <strnlen>
 6a0:	4c 01       	movw	r8, r24
 6a2:	82 01       	movw	r16, r4
 6a4:	f3 2d       	mov	r31, r3
 6a6:	ff 77       	andi	r31, 0x7F	; 127
 6a8:	3f 2e       	mov	r3, r31
 6aa:	16 c0       	rjmp	.+44     	; 0x6d8 <vfprintf+0x188>
 6ac:	28 01       	movw	r4, r16
 6ae:	22 e0       	ldi	r18, 0x02	; 2
 6b0:	42 0e       	add	r4, r18
 6b2:	51 1c       	adc	r5, r1
 6b4:	f8 01       	movw	r30, r16
 6b6:	a0 80       	ld	r10, Z
 6b8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ba:	36 fe       	sbrs	r3, 6
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <vfprintf+0x174>
 6be:	69 2d       	mov	r22, r9
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0x178>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	c5 01       	movw	r24, r10
 6ca:	0e 94 89 04 	call	0x912	; 0x912 <strnlen_P>
 6ce:	4c 01       	movw	r8, r24
 6d0:	f3 2d       	mov	r31, r3
 6d2:	f0 68       	ori	r31, 0x80	; 128
 6d4:	3f 2e       	mov	r3, r31
 6d6:	82 01       	movw	r16, r4
 6d8:	33 fc       	sbrc	r3, 3
 6da:	1b c0       	rjmp	.+54     	; 0x712 <vfprintf+0x1c2>
 6dc:	82 2d       	mov	r24, r2
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	88 16       	cp	r8, r24
 6e2:	99 06       	cpc	r9, r25
 6e4:	b0 f4       	brcc	.+44     	; 0x712 <vfprintf+0x1c2>
 6e6:	b6 01       	movw	r22, r12
 6e8:	80 e2       	ldi	r24, 0x20	; 32
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 6f0:	2a 94       	dec	r2
 6f2:	f4 cf       	rjmp	.-24     	; 0x6dc <vfprintf+0x18c>
 6f4:	f5 01       	movw	r30, r10
 6f6:	37 fc       	sbrc	r3, 7
 6f8:	85 91       	lpm	r24, Z+
 6fa:	37 fe       	sbrs	r3, 7
 6fc:	81 91       	ld	r24, Z+
 6fe:	5f 01       	movw	r10, r30
 700:	b6 01       	movw	r22, r12
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 708:	21 10       	cpse	r2, r1
 70a:	2a 94       	dec	r2
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	82 1a       	sub	r8, r18
 710:	91 08       	sbc	r9, r1
 712:	81 14       	cp	r8, r1
 714:	91 04       	cpc	r9, r1
 716:	71 f7       	brne	.-36     	; 0x6f4 <vfprintf+0x1a4>
 718:	e8 c0       	rjmp	.+464    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 71a:	84 36       	cpi	r24, 0x64	; 100
 71c:	11 f0       	breq	.+4      	; 0x722 <vfprintf+0x1d2>
 71e:	89 36       	cpi	r24, 0x69	; 105
 720:	41 f5       	brne	.+80     	; 0x772 <vfprintf+0x222>
 722:	f8 01       	movw	r30, r16
 724:	37 fe       	sbrs	r3, 7
 726:	07 c0       	rjmp	.+14     	; 0x736 <vfprintf+0x1e6>
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	82 81       	ldd	r24, Z+2	; 0x02
 72e:	93 81       	ldd	r25, Z+3	; 0x03
 730:	0c 5f       	subi	r16, 0xFC	; 252
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	08 c0       	rjmp	.+16     	; 0x746 <vfprintf+0x1f6>
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	07 2e       	mov	r0, r23
 73c:	00 0c       	add	r0, r0
 73e:	88 0b       	sbc	r24, r24
 740:	99 0b       	sbc	r25, r25
 742:	0e 5f       	subi	r16, 0xFE	; 254
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	f3 2d       	mov	r31, r3
 748:	ff 76       	andi	r31, 0x6F	; 111
 74a:	3f 2e       	mov	r3, r31
 74c:	97 ff       	sbrs	r25, 7
 74e:	09 c0       	rjmp	.+18     	; 0x762 <vfprintf+0x212>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	f0 68       	ori	r31, 0x80	; 128
 760:	3f 2e       	mov	r3, r31
 762:	2a e0       	ldi	r18, 0x0A	; 10
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	a3 01       	movw	r20, r6
 768:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__ultoa_invert>
 76c:	88 2e       	mov	r8, r24
 76e:	86 18       	sub	r8, r6
 770:	45 c0       	rjmp	.+138    	; 0x7fc <vfprintf+0x2ac>
 772:	85 37       	cpi	r24, 0x75	; 117
 774:	31 f4       	brne	.+12     	; 0x782 <vfprintf+0x232>
 776:	23 2d       	mov	r18, r3
 778:	2f 7e       	andi	r18, 0xEF	; 239
 77a:	b2 2e       	mov	r11, r18
 77c:	2a e0       	ldi	r18, 0x0A	; 10
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	25 c0       	rjmp	.+74     	; 0x7cc <vfprintf+0x27c>
 782:	93 2d       	mov	r25, r3
 784:	99 7f       	andi	r25, 0xF9	; 249
 786:	b9 2e       	mov	r11, r25
 788:	8f 36       	cpi	r24, 0x6F	; 111
 78a:	c1 f0       	breq	.+48     	; 0x7bc <vfprintf+0x26c>
 78c:	18 f4       	brcc	.+6      	; 0x794 <vfprintf+0x244>
 78e:	88 35       	cpi	r24, 0x58	; 88
 790:	79 f0       	breq	.+30     	; 0x7b0 <vfprintf+0x260>
 792:	b5 c0       	rjmp	.+362    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 794:	80 37       	cpi	r24, 0x70	; 112
 796:	19 f0       	breq	.+6      	; 0x79e <vfprintf+0x24e>
 798:	88 37       	cpi	r24, 0x78	; 120
 79a:	21 f0       	breq	.+8      	; 0x7a4 <vfprintf+0x254>
 79c:	b0 c0       	rjmp	.+352    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 79e:	e9 2f       	mov	r30, r25
 7a0:	e0 61       	ori	r30, 0x10	; 16
 7a2:	be 2e       	mov	r11, r30
 7a4:	b4 fe       	sbrs	r11, 4
 7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <vfprintf+0x272>
 7a8:	fb 2d       	mov	r31, r11
 7aa:	f4 60       	ori	r31, 0x04	; 4
 7ac:	bf 2e       	mov	r11, r31
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <vfprintf+0x272>
 7b0:	34 fe       	sbrs	r3, 4
 7b2:	0a c0       	rjmp	.+20     	; 0x7c8 <vfprintf+0x278>
 7b4:	29 2f       	mov	r18, r25
 7b6:	26 60       	ori	r18, 0x06	; 6
 7b8:	b2 2e       	mov	r11, r18
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <vfprintf+0x278>
 7bc:	28 e0       	ldi	r18, 0x08	; 8
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <vfprintf+0x27c>
 7c2:	20 e1       	ldi	r18, 0x10	; 16
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x27c>
 7c8:	20 e1       	ldi	r18, 0x10	; 16
 7ca:	32 e0       	ldi	r19, 0x02	; 2
 7cc:	f8 01       	movw	r30, r16
 7ce:	b7 fe       	sbrs	r11, 7
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <vfprintf+0x290>
 7d2:	60 81       	ld	r22, Z
 7d4:	71 81       	ldd	r23, Z+1	; 0x01
 7d6:	82 81       	ldd	r24, Z+2	; 0x02
 7d8:	93 81       	ldd	r25, Z+3	; 0x03
 7da:	0c 5f       	subi	r16, 0xFC	; 252
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x29c>
 7e0:	60 81       	ld	r22, Z
 7e2:	71 81       	ldd	r23, Z+1	; 0x01
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 5f       	subi	r16, 0xFE	; 254
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
 7ec:	a3 01       	movw	r20, r6
 7ee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__ultoa_invert>
 7f2:	88 2e       	mov	r8, r24
 7f4:	86 18       	sub	r8, r6
 7f6:	fb 2d       	mov	r31, r11
 7f8:	ff 77       	andi	r31, 0x7F	; 127
 7fa:	3f 2e       	mov	r3, r31
 7fc:	36 fe       	sbrs	r3, 6
 7fe:	0d c0       	rjmp	.+26     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 800:	23 2d       	mov	r18, r3
 802:	2e 7f       	andi	r18, 0xFE	; 254
 804:	a2 2e       	mov	r10, r18
 806:	89 14       	cp	r8, r9
 808:	58 f4       	brcc	.+22     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 80a:	34 fe       	sbrs	r3, 4
 80c:	0b c0       	rjmp	.+22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 80e:	32 fc       	sbrc	r3, 2
 810:	09 c0       	rjmp	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 812:	83 2d       	mov	r24, r3
 814:	8e 7e       	andi	r24, 0xEE	; 238
 816:	a8 2e       	mov	r10, r24
 818:	05 c0       	rjmp	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81a:	b8 2c       	mov	r11, r8
 81c:	a3 2c       	mov	r10, r3
 81e:	03 c0       	rjmp	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 820:	b8 2c       	mov	r11, r8
 822:	01 c0       	rjmp	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 824:	b9 2c       	mov	r11, r9
 826:	a4 fe       	sbrs	r10, 4
 828:	0f c0       	rjmp	.+30     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 82a:	fe 01       	movw	r30, r28
 82c:	e8 0d       	add	r30, r8
 82e:	f1 1d       	adc	r31, r1
 830:	80 81       	ld	r24, Z
 832:	80 33       	cpi	r24, 0x30	; 48
 834:	21 f4       	brne	.+8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 836:	9a 2d       	mov	r25, r10
 838:	99 7e       	andi	r25, 0xE9	; 233
 83a:	a9 2e       	mov	r10, r25
 83c:	09 c0       	rjmp	.+18     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 83e:	a2 fe       	sbrs	r10, 2
 840:	06 c0       	rjmp	.+12     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 842:	b3 94       	inc	r11
 844:	b3 94       	inc	r11
 846:	04 c0       	rjmp	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 848:	8a 2d       	mov	r24, r10
 84a:	86 78       	andi	r24, 0x86	; 134
 84c:	09 f0       	breq	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	b3 94       	inc	r11
 850:	a3 fc       	sbrc	r10, 3
 852:	11 c0       	rjmp	.+34     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 854:	a0 fe       	sbrs	r10, 0
 856:	06 c0       	rjmp	.+12     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 858:	b2 14       	cp	r11, r2
 85a:	88 f4       	brcc	.+34     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 85c:	28 0c       	add	r2, r8
 85e:	92 2c       	mov	r9, r2
 860:	9b 18       	sub	r9, r11
 862:	0e c0       	rjmp	.+28     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 864:	b2 14       	cp	r11, r2
 866:	60 f4       	brcc	.+24     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 868:	b6 01       	movw	r22, r12
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 872:	b3 94       	inc	r11
 874:	f7 cf       	rjmp	.-18     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 876:	b2 14       	cp	r11, r2
 878:	18 f4       	brcc	.+6      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87a:	2b 18       	sub	r2, r11
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 87e:	98 2c       	mov	r9, r8
 880:	21 2c       	mov	r2, r1
 882:	a4 fe       	sbrs	r10, 4
 884:	10 c0       	rjmp	.+32     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 886:	b6 01       	movw	r22, r12
 888:	80 e3       	ldi	r24, 0x30	; 48
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 890:	a2 fe       	sbrs	r10, 2
 892:	17 c0       	rjmp	.+46     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 894:	a1 fc       	sbrc	r10, 1
 896:	03 c0       	rjmp	.+6      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 898:	88 e7       	ldi	r24, 0x78	; 120
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89e:	88 e5       	ldi	r24, 0x58	; 88
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	b6 01       	movw	r22, r12
 8a4:	0c c0       	rjmp	.+24     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8a6:	8a 2d       	mov	r24, r10
 8a8:	86 78       	andi	r24, 0x86	; 134
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8ac:	a1 fe       	sbrs	r10, 1
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8b0:	8b e2       	ldi	r24, 0x2B	; 43
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	a7 fc       	sbrc	r10, 7
 8b8:	8d e2       	ldi	r24, 0x2D	; 45
 8ba:	b6 01       	movw	r22, r12
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8c2:	89 14       	cp	r8, r9
 8c4:	38 f4       	brcc	.+14     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c6:	b6 01       	movw	r22, r12
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8d0:	9a 94       	dec	r9
 8d2:	f7 cf       	rjmp	.-18     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8d4:	8a 94       	dec	r8
 8d6:	f3 01       	movw	r30, r6
 8d8:	e8 0d       	add	r30, r8
 8da:	f1 1d       	adc	r31, r1
 8dc:	80 81       	ld	r24, Z
 8de:	b6 01       	movw	r22, r12
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8e6:	81 10       	cpse	r8, r1
 8e8:	f5 cf       	rjmp	.-22     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8ea:	22 20       	and	r2, r2
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8ee:	42 ce       	rjmp	.-892    	; 0x574 <vfprintf+0x24>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 9f 04 	call	0x93e	; 0x93e <fputc>
 8fa:	2a 94       	dec	r2
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8fe:	f6 01       	movw	r30, r12
 900:	86 81       	ldd	r24, Z+6	; 0x06
 902:	97 81       	ldd	r25, Z+7	; 0x07
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xb>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	2b 96       	adiw	r28, 0x0b	; 11
 90c:	e2 e1       	ldi	r30, 0x12	; 18
 90e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__epilogue_restores__>

00000912 <strnlen_P>:
 912:	fc 01       	movw	r30, r24
 914:	05 90       	lpm	r0, Z+
 916:	61 50       	subi	r22, 0x01	; 1
 918:	70 40       	sbci	r23, 0x00	; 0
 91a:	01 10       	cpse	r0, r1
 91c:	d8 f7       	brcc	.-10     	; 0x914 <strnlen_P+0x2>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	8e 0f       	add	r24, r30
 924:	9f 1f       	adc	r25, r31
 926:	08 95       	ret

00000928 <strnlen>:
 928:	fc 01       	movw	r30, r24
 92a:	61 50       	subi	r22, 0x01	; 1
 92c:	70 40       	sbci	r23, 0x00	; 0
 92e:	01 90       	ld	r0, Z+
 930:	01 10       	cpse	r0, r1
 932:	d8 f7       	brcc	.-10     	; 0x92a <strnlen+0x2>
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	8e 0f       	add	r24, r30
 93a:	9f 1f       	adc	r25, r31
 93c:	08 95       	ret

0000093e <fputc>:
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	fb 01       	movw	r30, r22
 948:	23 81       	ldd	r18, Z+3	; 0x03
 94a:	21 fd       	sbrc	r18, 1
 94c:	03 c0       	rjmp	.+6      	; 0x954 <fputc+0x16>
 94e:	8f ef       	ldi	r24, 0xFF	; 255
 950:	9f ef       	ldi	r25, 0xFF	; 255
 952:	2c c0       	rjmp	.+88     	; 0x9ac <fputc+0x6e>
 954:	22 ff       	sbrs	r18, 2
 956:	16 c0       	rjmp	.+44     	; 0x984 <fputc+0x46>
 958:	46 81       	ldd	r20, Z+6	; 0x06
 95a:	57 81       	ldd	r21, Z+7	; 0x07
 95c:	24 81       	ldd	r18, Z+4	; 0x04
 95e:	35 81       	ldd	r19, Z+5	; 0x05
 960:	42 17       	cp	r20, r18
 962:	53 07       	cpc	r21, r19
 964:	44 f4       	brge	.+16     	; 0x976 <fputc+0x38>
 966:	a0 81       	ld	r26, Z
 968:	b1 81       	ldd	r27, Z+1	; 0x01
 96a:	9d 01       	movw	r18, r26
 96c:	2f 5f       	subi	r18, 0xFF	; 255
 96e:	3f 4f       	sbci	r19, 0xFF	; 255
 970:	31 83       	std	Z+1, r19	; 0x01
 972:	20 83       	st	Z, r18
 974:	8c 93       	st	X, r24
 976:	26 81       	ldd	r18, Z+6	; 0x06
 978:	37 81       	ldd	r19, Z+7	; 0x07
 97a:	2f 5f       	subi	r18, 0xFF	; 255
 97c:	3f 4f       	sbci	r19, 0xFF	; 255
 97e:	37 83       	std	Z+7, r19	; 0x07
 980:	26 83       	std	Z+6, r18	; 0x06
 982:	14 c0       	rjmp	.+40     	; 0x9ac <fputc+0x6e>
 984:	8b 01       	movw	r16, r22
 986:	ec 01       	movw	r28, r24
 988:	fb 01       	movw	r30, r22
 98a:	00 84       	ldd	r0, Z+8	; 0x08
 98c:	f1 85       	ldd	r31, Z+9	; 0x09
 98e:	e0 2d       	mov	r30, r0
 990:	09 95       	icall
 992:	89 2b       	or	r24, r25
 994:	e1 f6       	brne	.-72     	; 0x94e <fputc+0x10>
 996:	d8 01       	movw	r26, r16
 998:	16 96       	adiw	r26, 0x06	; 6
 99a:	8d 91       	ld	r24, X+
 99c:	9c 91       	ld	r25, X
 99e:	17 97       	sbiw	r26, 0x07	; 7
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	17 96       	adiw	r26, 0x07	; 7
 9a4:	9c 93       	st	X, r25
 9a6:	8e 93       	st	-X, r24
 9a8:	16 97       	sbiw	r26, 0x06	; 6
 9aa:	ce 01       	movw	r24, r28
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	08 95       	ret

000009b6 <__ultoa_invert>:
 9b6:	fa 01       	movw	r30, r20
 9b8:	aa 27       	eor	r26, r26
 9ba:	28 30       	cpi	r18, 0x08	; 8
 9bc:	51 f1       	breq	.+84     	; 0xa12 <__ultoa_invert+0x5c>
 9be:	20 31       	cpi	r18, 0x10	; 16
 9c0:	81 f1       	breq	.+96     	; 0xa22 <__ultoa_invert+0x6c>
 9c2:	e8 94       	clt
 9c4:	6f 93       	push	r22
 9c6:	6e 7f       	andi	r22, 0xFE	; 254
 9c8:	6e 5f       	subi	r22, 0xFE	; 254
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	af 4f       	sbci	r26, 0xFF	; 255
 9d2:	b1 e0       	ldi	r27, 0x01	; 1
 9d4:	3e d0       	rcall	.+124    	; 0xa52 <__ultoa_invert+0x9c>
 9d6:	b4 e0       	ldi	r27, 0x04	; 4
 9d8:	3c d0       	rcall	.+120    	; 0xa52 <__ultoa_invert+0x9c>
 9da:	67 0f       	add	r22, r23
 9dc:	78 1f       	adc	r23, r24
 9de:	89 1f       	adc	r24, r25
 9e0:	9a 1f       	adc	r25, r26
 9e2:	a1 1d       	adc	r26, r1
 9e4:	68 0f       	add	r22, r24
 9e6:	79 1f       	adc	r23, r25
 9e8:	8a 1f       	adc	r24, r26
 9ea:	91 1d       	adc	r25, r1
 9ec:	a1 1d       	adc	r26, r1
 9ee:	6a 0f       	add	r22, r26
 9f0:	71 1d       	adc	r23, r1
 9f2:	81 1d       	adc	r24, r1
 9f4:	91 1d       	adc	r25, r1
 9f6:	a1 1d       	adc	r26, r1
 9f8:	20 d0       	rcall	.+64     	; 0xa3a <__ultoa_invert+0x84>
 9fa:	09 f4       	brne	.+2      	; 0x9fe <__ultoa_invert+0x48>
 9fc:	68 94       	set
 9fe:	3f 91       	pop	r19
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	26 9f       	mul	r18, r22
 a04:	11 24       	eor	r1, r1
 a06:	30 19       	sub	r19, r0
 a08:	30 5d       	subi	r19, 0xD0	; 208
 a0a:	31 93       	st	Z+, r19
 a0c:	de f6       	brtc	.-74     	; 0x9c4 <__ultoa_invert+0xe>
 a0e:	cf 01       	movw	r24, r30
 a10:	08 95       	ret
 a12:	46 2f       	mov	r20, r22
 a14:	47 70       	andi	r20, 0x07	; 7
 a16:	40 5d       	subi	r20, 0xD0	; 208
 a18:	41 93       	st	Z+, r20
 a1a:	b3 e0       	ldi	r27, 0x03	; 3
 a1c:	0f d0       	rcall	.+30     	; 0xa3c <__ultoa_invert+0x86>
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__ultoa_invert+0x5c>
 a20:	f6 cf       	rjmp	.-20     	; 0xa0e <__ultoa_invert+0x58>
 a22:	46 2f       	mov	r20, r22
 a24:	4f 70       	andi	r20, 0x0F	; 15
 a26:	40 5d       	subi	r20, 0xD0	; 208
 a28:	4a 33       	cpi	r20, 0x3A	; 58
 a2a:	18 f0       	brcs	.+6      	; 0xa32 <__ultoa_invert+0x7c>
 a2c:	49 5d       	subi	r20, 0xD9	; 217
 a2e:	31 fd       	sbrc	r19, 1
 a30:	40 52       	subi	r20, 0x20	; 32
 a32:	41 93       	st	Z+, r20
 a34:	02 d0       	rcall	.+4      	; 0xa3a <__ultoa_invert+0x84>
 a36:	a9 f7       	brne	.-22     	; 0xa22 <__ultoa_invert+0x6c>
 a38:	ea cf       	rjmp	.-44     	; 0xa0e <__ultoa_invert+0x58>
 a3a:	b4 e0       	ldi	r27, 0x04	; 4
 a3c:	a6 95       	lsr	r26
 a3e:	97 95       	ror	r25
 a40:	87 95       	ror	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	ba 95       	dec	r27
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__ultoa_invert+0x86>
 a4a:	00 97       	sbiw	r24, 0x00	; 0
 a4c:	61 05       	cpc	r22, r1
 a4e:	71 05       	cpc	r23, r1
 a50:	08 95       	ret
 a52:	9b 01       	movw	r18, r22
 a54:	ac 01       	movw	r20, r24
 a56:	0a 2e       	mov	r0, r26
 a58:	06 94       	lsr	r0
 a5a:	57 95       	ror	r21
 a5c:	47 95       	ror	r20
 a5e:	37 95       	ror	r19
 a60:	27 95       	ror	r18
 a62:	ba 95       	dec	r27
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__ultoa_invert+0xa2>
 a66:	62 0f       	add	r22, r18
 a68:	73 1f       	adc	r23, r19
 a6a:	84 1f       	adc	r24, r20
 a6c:	95 1f       	adc	r25, r21
 a6e:	a0 1d       	adc	r26, r0
 a70:	08 95       	ret

00000a72 <__prologue_saves__>:
 a72:	2f 92       	push	r2
 a74:	3f 92       	push	r3
 a76:	4f 92       	push	r4
 a78:	5f 92       	push	r5
 a7a:	6f 92       	push	r6
 a7c:	7f 92       	push	r7
 a7e:	8f 92       	push	r8
 a80:	9f 92       	push	r9
 a82:	af 92       	push	r10
 a84:	bf 92       	push	r11
 a86:	cf 92       	push	r12
 a88:	df 92       	push	r13
 a8a:	ef 92       	push	r14
 a8c:	ff 92       	push	r15
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	ca 1b       	sub	r28, r26
 a9c:	db 0b       	sbc	r29, r27
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	f8 94       	cli
 aa2:	de bf       	out	0x3e, r29	; 62
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	cd bf       	out	0x3d, r28	; 61
 aa8:	09 94       	ijmp

00000aaa <__epilogue_restores__>:
 aaa:	2a 88       	ldd	r2, Y+18	; 0x12
 aac:	39 88       	ldd	r3, Y+17	; 0x11
 aae:	48 88       	ldd	r4, Y+16	; 0x10
 ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
 aba:	aa 84       	ldd	r10, Y+10	; 0x0a
 abc:	b9 84       	ldd	r11, Y+9	; 0x09
 abe:	c8 84       	ldd	r12, Y+8	; 0x08
 ac0:	df 80       	ldd	r13, Y+7	; 0x07
 ac2:	ee 80       	ldd	r14, Y+6	; 0x06
 ac4:	fd 80       	ldd	r15, Y+5	; 0x05
 ac6:	0c 81       	ldd	r16, Y+4	; 0x04
 ac8:	1b 81       	ldd	r17, Y+3	; 0x03
 aca:	aa 81       	ldd	r26, Y+2	; 0x02
 acc:	b9 81       	ldd	r27, Y+1	; 0x01
 ace:	ce 0f       	add	r28, r30
 ad0:	d1 1d       	adc	r29, r1
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	ed 01       	movw	r28, r26
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
