
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000bc0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080016e  0080016e  00000cc2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a2  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a98  00000000  00000000  00002472  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8f  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006de  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000980  00000000  00000000  000044ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e6       	ldi	r26, 0x6E	; 110
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 37       	cpi	r26, 0x76	; 118
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LeerDHT>:
#define TIMEOUT 1000 // Timeout para esperar el cambio de estado del pin

static uint8_t humedad;
static uint8_t temperatura;

int LeerDHT() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <LeerDHT+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <LeerDHT+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	// Recepción de datos
	uint8_t data[5] = {0};
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	df 01       	movw	r26, r30
  bc:	1d 92       	st	X+, r1
  be:	8a 95       	dec	r24
  c0:	e9 f7       	brne	.-6      	; 0xbc <LeerDHT+0x16>
	uint16_t timeout = 0;

	// Iniciar comunicación con el sensor
	DDRC |= (1 << PINC0);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC0);
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LeerDHT+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LeerDHT+0x32>
  d8:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1 << PINC0);
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	88 b9       	out	0x08, r24	; 8
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	a9 ef       	ldi	r26, 0xF9	; 249
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	a0 40       	sbci	r26, 0x00	; 0
  ea:	b0 40       	sbci	r27, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LeerDHT+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LeerDHT+0x4a>
  f0:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1 << PINC0);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0);
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	87 b9       	out	0x07, r24	; 7

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 102:	05 c0       	rjmp	.+10     	; 0x10e <LeerDHT+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	25 e0       	ldi	r18, 0x05	; 5
 106:	2a 95       	dec	r18
 108:	f1 f7       	brne	.-4      	; 0x106 <LeerDHT+0x60>
 10a:	00 00       	nop
		_delay_us(1);
		timeout++;
 10c:	01 96       	adiw	r24, 0x01	; 1
	PORTC |= (1 << PINC0);
	DDRC &= ~(1 << PINC0);

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 10e:	30 9b       	sbis	0x06, 0	; 6
 110:	04 c0       	rjmp	.+8      	; 0x11a <LeerDHT+0x74>
 112:	88 3e       	cpi	r24, 0xE8	; 232
 114:	a3 e0       	ldi	r26, 0x03	; 3
 116:	9a 07       	cpc	r25, r26
 118:	a8 f3       	brcs	.-22     	; 0x104 <LeerDHT+0x5e>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 11a:	88 3e       	cpi	r24, 0xE8	; 232
 11c:	93 40       	sbci	r25, 0x03	; 3
 11e:	08 f0       	brcs	.+2      	; 0x122 <LeerDHT+0x7c>
 120:	6d c0       	rjmp	.+218    	; 0x1fc <LeerDHT+0x156>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	05 c0       	rjmp	.+10     	; 0x132 <LeerDHT+0x8c>
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	2a 95       	dec	r18
 12c:	f1 f7       	brne	.-4      	; 0x12a <LeerDHT+0x84>
 12e:	00 00       	nop

	// Esperar hasta que el pin se vuelva alto
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
 130:	01 96       	adiw	r24, 0x01	; 1
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Esperar hasta que el pin se vuelva alto
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 132:	30 99       	sbic	0x06, 0	; 6
 134:	04 c0       	rjmp	.+8      	; 0x13e <LeerDHT+0x98>
 136:	88 3e       	cpi	r24, 0xE8	; 232
 138:	a3 e0       	ldi	r26, 0x03	; 3
 13a:	9a 07       	cpc	r25, r26
 13c:	a8 f3       	brcs	.-22     	; 0x128 <LeerDHT+0x82>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 13e:	88 3e       	cpi	r24, 0xE8	; 232
 140:	93 40       	sbci	r25, 0x03	; 3
 142:	08 f0       	brcs	.+2      	; 0x146 <LeerDHT+0xa0>
 144:	5e c0       	rjmp	.+188    	; 0x202 <LeerDHT+0x15c>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <LeerDHT+0xb0>
 14c:	25 e0       	ldi	r18, 0x05	; 5
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <LeerDHT+0xa8>
 152:	00 00       	nop

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
 154:	01 96       	adiw	r24, 0x01	; 1
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 156:	30 9b       	sbis	0x06, 0	; 6
 158:	04 c0       	rjmp	.+8      	; 0x162 <LeerDHT+0xbc>
 15a:	88 3e       	cpi	r24, 0xE8	; 232
 15c:	a3 e0       	ldi	r26, 0x03	; 3
 15e:	9a 07       	cpc	r25, r26
 160:	a8 f3       	brcs	.-22     	; 0x14c <LeerDHT+0xa6>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 162:	88 3e       	cpi	r24, 0xE8	; 232
 164:	93 40       	sbci	r25, 0x03	; 3
 166:	08 f0       	brcs	.+2      	; 0x16a <LeerDHT+0xc4>
 168:	4f c0       	rjmp	.+158    	; 0x208 <LeerDHT+0x162>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	2b c0       	rjmp	.+86     	; 0x1c6 <LeerDHT+0x120>
 170:	25 e0       	ldi	r18, 0x05	; 5
 172:	2a 95       	dec	r18
 174:	f1 f7       	brne	.-4      	; 0x172 <LeerDHT+0xcc>
 176:	00 00       	nop

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
			// Esperar hasta que el pin se vuelva alto
			while(!(PINC & (1 << PINC0))) {
 178:	30 9b       	sbis	0x06, 0	; 6
 17a:	fa cf       	rjmp	.-12     	; 0x170 <LeerDHT+0xca>
 17c:	a0 ea       	ldi	r26, 0xA0	; 160
 17e:	aa 95       	dec	r26
 180:	f1 f7       	brne	.-4      	; 0x17e <LeerDHT+0xd8>
				_delay_us(1);
			}

			_delay_us(30);
			if(PINC & (1 << PINC0)) {
 182:	30 9b       	sbis	0x06, 0	; 6
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <LeerDHT+0x10c>
				data[i] |= (1 << j); // Si la duración es mayor a 30us, el bit es un 1
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 2e       	mov	r0, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <LeerDHT+0xec>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <LeerDHT+0xe8>
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	e4 0f       	add	r30, r20
 1a0:	f5 1f       	adc	r31, r21
 1a2:	30 81       	ld	r19, Z
 1a4:	23 2b       	or	r18, r19
 1a6:	20 83       	st	Z, r18
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <LeerDHT+0x10c>
 1aa:	b5 e0       	ldi	r27, 0x05	; 5
 1ac:	ba 95       	dec	r27
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LeerDHT+0x106>
 1b0:	00 00       	nop
			}

			// Esperar hasta que el pin se vuelva bajo
			timeout = 0;
			while(PINC & (1 << PINC0)) {
 1b2:	30 99       	sbic	0x06, 0	; 6
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <LeerDHT+0x104>
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <LeerDHT+0x118>
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	99 23       	and	r25, r25
 1c0:	dc f6       	brge	.-74     	; 0x178 <LeerDHT+0xd2>
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	45 30       	cpi	r20, 0x05	; 5
 1c8:	51 05       	cpc	r21, r1
 1ca:	bc f3       	brlt	.-18     	; 0x1ba <LeerDHT+0x114>
			}
		}
	}

	// Verificar checksum
	if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 1cc:	2d 81       	ldd	r18, Y+5	; 0x05
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	59 81       	ldd	r21, Y+1	; 0x01
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	85 0f       	add	r24, r21
 1d8:	91 1d       	adc	r25, r1
 1da:	4b 81       	ldd	r20, Y+3	; 0x03
 1dc:	84 0f       	add	r24, r20
 1de:	91 1d       	adc	r25, r1
 1e0:	6c 81       	ldd	r22, Y+4	; 0x04
 1e2:	86 0f       	add	r24, r22
 1e4:	91 1d       	adc	r25, r1
 1e6:	99 27       	eor	r25, r25
 1e8:	28 17       	cp	r18, r24
 1ea:	39 07       	cpc	r19, r25
 1ec:	81 f4       	brne	.+32     	; 0x20e <LeerDHT+0x168>
		// Decodificar datos
		humedad = data[0];
 1ee:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <humedad>
		temperatura = data[2];
 1f2:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <__data_end>
		return DHTLIB_OK; // Lectura exitosa
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 1fc:	8e ef       	ldi	r24, 0xFE	; 254
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	08 c0       	rjmp	.+16     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 202:	8e ef       	ldi	r24, 0xFE	; 254
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	05 c0       	rjmp	.+10     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 208:	8e ef       	ldi	r24, 0xFE	; 254
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	02 c0       	rjmp	.+4      	; 0x212 <LeerDHT+0x16c>
		// Decodificar datos
		humedad = data[0];
		temperatura = data[2];
		return DHTLIB_OK; // Lectura exitosa
		} else {
		return DHTLIB_ERROR_CHECKSUM; // Error de checksum
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <getHumedad>:

uint8_t getHumedad() {
	return humedad;
}
 222:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <humedad>
 226:	08 95       	ret

00000228 <getTemperatura>:

uint8_t getTemperatura() {
	return temperatura;
 228:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 22c:	08 95       	ret

0000022e <configurarTimer1>:
		}


// Función para configurar el Timer1
void configurarTimer1() {
	TCCR1A = 0;
 22e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10); // Modo CTC, prescaler de 64
 232:	e1 e8       	ldi	r30, 0x81	; 129
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	8b 60       	ori	r24, 0x0B	; 11
 23a:	80 83       	st	Z, r24
	OCR1A = 249; // Configurar OCR1A para que el comparador coincida cada 1 milisegundo
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Habilitar interrupción de comparador A
 248:	ef e6       	ldi	r30, 0x6F	; 111
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <inicializarContador>:
}

// Función para inicializar los contadores
void inicializarContador() {
	count = 0;
 254:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <count+0x1>
 258:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <count>
 25c:	08 95       	ret

0000025e <chequeoFlag>:
}

// Función para chequear la Flag2
uint8_t chequeoFlag() {
	if (Flag_tiempo == 1) {
 25e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <Flag_tiempo>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	19 f4       	brne	.+6      	; 0x26c <chequeoFlag+0xe>
		Flag_tiempo = 0;
 266:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Flag_tiempo>
		return 1;
 26a:	08 95       	ret
		} else {
		return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 26e:	08 95       	ret

00000270 <main>:
char hora[];
char salto[]="\r\n";
volatile uint8_t suspendFlag = 0; // Bandera de suspensión
int main(void)
{ 
	RTC_Init();  //inicializamos el RTC
 270:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <RTC_Init>
	//RTC_SetDate(); sirve por si se requiere setear una fecha (no pedido en el trabajo)
	//RTC_SetTime(); sirve por si se requiere setear una tiempo (no pedido en el trabajo)
	int result=0;
   configurarTimer1();
 274:	0e 94 17 01 	call	0x22e	; 0x22e <configurarTimer1>
	SerialPort_Init(BR9600);   // Inicializo formato 8N1 y BAUDRATE = 9600bps
 278:	87 e6       	ldi	r24, 0x67	; 103
 27a:	0e 94 95 02 	call	0x52a	; 0x52a <SerialPort_Init>
	SerialPort_TX_Enable();		// Activo el transmisor del Puerto Serie
 27e:	0e 94 9f 02 	call	0x53e	; 0x53e <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
 282:	0e 94 a5 02 	call	0x54a	; 0x54a <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // habilitacion de las interrupciones del receptor
 286:	0e 94 ab 02 	call	0x556	; 0x556 <SerialPort_RX_Interrupt_Enable>
	sei();								// habilitacion de interrupciones globales
 28a:	78 94       	sei
    while(1){ 
	if(!suspendFlag) {	// si suspendFlag esta en 1, significa que el programa esta frenado.			
 28c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <suspendFlag>
 290:	81 11       	cpse	r24, r1
 292:	fc cf       	rjmp	.-8      	; 0x28c <main+0x1c>
		result = LeerDHT();
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <LeerDHT>
		  if (result == DHTLIB_OK) {  //si no hubo errores en recibir los datos del DHT11
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	b1 f5       	brne	.+108    	; 0x308 <main+0x98>
			  SerialPort_Send_String(msg1);          //"Humedad: "
 29c:	8a e1       	ldi	r24, 0x1A	; 26
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getHumedad()); //se envia el valor obtenido de la humedad del DHT11
 2a4:	0e 94 11 01 	call	0x222	; 0x222 <getHumedad>
 2a8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg2); //"%  "
 2ac:	86 e1       	ldi	r24, 0x16	; 22
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			  SerialPort_Send_String(msg3);	//" Temperatura: "
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getTemperatura());//se envia el valor obtenido de la temperatura del DHT11
 2bc:	0e 94 14 01 	call	0x228	; 0x228 <getTemperatura>
 2c0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg4); //"C  "
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			   cli(); // se inhabilitan las interrupciones 
 2cc:	f8 94       	cli
			   RTC_GetDate(fecha); //se obtiene la fecha del RTC
 2ce:	85 e7       	ldi	r24, 0x75	; 117
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 37 02 	call	0x46e	; 0x46e <RTC_GetDate>
			   SerialPort_Send_String(" FECHA: ");
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			   SerialPort_Send_String(fecha);
 2de:	85 e7       	ldi	r24, 0x75	; 117
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			   RTC_GetTime(hora); //se obtiene la hora del RTC
 2e6:	81 e7       	ldi	r24, 0x71	; 113
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RTC_GetTime>
			   SerialPort_Send_String(" HORA: ");
 2ee:	8e e2       	ldi	r24, 0x2E	; 46
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			   SerialPort_Send_String(hora);
 2f6:	81 e7       	ldi	r24, 0x71	; 113
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
			   SerialPort_Send_String(salto); //salto de linea
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
 306:	04 c0       	rjmp	.+8      	; 0x310 <main+0xa0>
			  }
			  else {SerialPort_Send_String("Ha ocurrido un error...\r\n");}
 308:	86 e3       	ldi	r24, 0x36	; 54
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 b9 02 	call	0x572	; 0x572 <SerialPort_Send_String>
		      sei();  // habilitacion de interrupciones globales
 310:	78 94       	sei
			inicializarContador(); //count = 0
 312:	0e 94 2a 01 	call	0x254	; 0x254 <inicializarContador>
		  while(!chequeoFlag()) { 
 316:	0e 94 2f 01 	call	0x25e	; 0x25e <chequeoFlag>
 31a:	88 23       	and	r24, r24
 31c:	e1 f3       	breq	.-8      	; 0x316 <main+0xa6>
 31e:	b6 cf       	rjmp	.-148    	; 0x28c <main+0x1c>

00000320 <__vector_11>:
	}
}


// ISR del TIMER1
ISR(TIMER1_COMPA_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
	count++;    // Incremento del contador para la Flag
 330:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <count>
 334:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <count+0x1>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <count+0x1>
 33e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <count>
	if (count == 2000) {
 342:	80 3d       	cpi	r24, 0xD0	; 208
 344:	97 40       	sbci	r25, 0x07	; 7
 346:	39 f4       	brne	.+14     	; 0x356 <__vector_11+0x36>
		Flag_tiempo = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <Flag_tiempo>
		count = 0;
 34e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <count+0x1>
 352:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <count>
	}
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <bcdToDec>:
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
	I2C_Write(0x04); // Dirección de registro de fecha
	I2C_Write(0x10);
	I2C_Write(0x06);
	I2C_Write(0x24);
	I2C_Stop();
 366:	98 2f       	mov	r25, r24
 368:	92 95       	swap	r25
 36a:	9f 70       	andi	r25, 0x0F	; 15
 36c:	99 0f       	add	r25, r25
 36e:	29 2f       	mov	r18, r25
 370:	22 0f       	add	r18, r18
 372:	22 0f       	add	r18, r18
 374:	92 0f       	add	r25, r18
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	89 0f       	add	r24, r25
 37a:	08 95       	ret

0000037c <I2C_Init>:
 37c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 38c:	08 95       	ret

0000038e <I2C_Start>:
 38e:	84 ea       	ldi	r24, 0xA4	; 164
 390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 394:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 398:	88 23       	and	r24, r24
 39a:	e4 f7       	brge	.-8      	; 0x394 <I2C_Start+0x6>
 39c:	08 95       	ret

0000039e <I2C_Stop>:
 39e:	84 e9       	ldi	r24, 0x94	; 148
 3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a4:	08 95       	ret

000003a6 <I2C_Write>:
 3a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3aa:	84 e8       	ldi	r24, 0x84	; 132
 3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b4:	88 23       	and	r24, r24
 3b6:	e4 f7       	brge	.-8      	; 0x3b0 <I2C_Write+0xa>
 3b8:	08 95       	ret

000003ba <I2C_ReadAck>:
 3ba:	84 ec       	ldi	r24, 0xC4	; 196
 3bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3c4:	88 23       	and	r24, r24
 3c6:	e4 f7       	brge	.-8      	; 0x3c0 <I2C_ReadAck+0x6>
 3c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3cc:	08 95       	ret

000003ce <I2C_ReadNack>:
 3ce:	84 e8       	ldi	r24, 0x84	; 132
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d8:	88 23       	and	r24, r24
 3da:	e4 f7       	brge	.-8      	; 0x3d4 <I2C_ReadNack+0x6>
 3dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3e0:	08 95       	ret

000003e2 <RTC_Init>:
 3e2:	0e 94 be 01 	call	0x37c	; 0x37c <I2C_Init>
 3e6:	08 95       	ret

000003e8 <RTC_GetTime>:
	
}

void RTC_GetTime(char* timeStr) {
 3e8:	ff 92       	push	r15
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	c8 2f       	mov	r28, r24
 3f4:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x00 (segundos)
	I2C_Start();
 3f6:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 3fa:	80 ed       	ldi	r24, 0xD0	; 208
 3fc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	I2C_Write(0x00); // Dirección de registro de segundos
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	I2C_Stop();
 406:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Leer tiempo (segundos, minutos, horas)
	I2C_Start();
 40a:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 40e:	81 ed       	ldi	r24, 0xD1	; 209
 410:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	uint8_t seconds = bcdToDec(I2C_ReadAck());
 414:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_ReadAck>
 418:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 41c:	f8 2e       	mov	r15, r24
	uint8_t minutes = bcdToDec(I2C_ReadAck());
 41e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_ReadAck>
 422:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 426:	08 2f       	mov	r16, r24
	uint8_t hours = bcdToDec(I2C_ReadNack());
 428:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_ReadNack>
 42c:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 430:	18 2f       	mov	r17, r24
	I2C_Stop();
 432:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Formatear hora
	sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
 436:	1f 92       	push	r1
 438:	ff 92       	push	r15
 43a:	1f 92       	push	r1
 43c:	0f 93       	push	r16
 43e:	1f 92       	push	r1
 440:	1f 93       	push	r17
 442:	80 e5       	ldi	r24, 0x50	; 80
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	9f 93       	push	r25
 448:	8f 93       	push	r24
 44a:	df 93       	push	r29
 44c:	cf 93       	push	r28
 44e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <sprintf>
}
 452:	8d b7       	in	r24, 0x3d	; 61
 454:	9e b7       	in	r25, 0x3e	; 62
 456:	0a 96       	adiw	r24, 0x0a	; 10
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	9e bf       	out	0x3e, r25	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	8d bf       	out	0x3d, r24	; 61
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	ff 90       	pop	r15
 46c:	08 95       	ret

0000046e <RTC_GetDate>:

void RTC_GetDate(char* dateStr) {
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	c8 2f       	mov	r28, r24
 47a:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x04 (día del mes)
	I2C_Start();
 47c:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 480:	80 ed       	ldi	r24, 0xD0	; 208
 482:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	I2C_Write(0x04); // Dirección de registro de día del mes
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	I2C_Stop();
 48c:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Leer fecha (día, mes, año)
	I2C_Start();
 490:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 494:	81 ed       	ldi	r24, 0xD1	; 209
 496:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <I2C_Write>
	uint8_t day = bcdToDec(I2C_ReadAck()); 
 49a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_ReadAck>
 49e:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4a2:	18 2f       	mov	r17, r24
	uint8_t month = bcdToDec(I2C_ReadAck());
 4a4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <I2C_ReadAck>
 4a8:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4ac:	08 2f       	mov	r16, r24
	uint8_t year = bcdToDec(I2C_ReadNack());
 4ae:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_ReadNack>
 4b2:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4b6:	f8 2e       	mov	r15, r24
	I2C_Stop();
 4b8:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Formatear fecha
	sprintf(dateStr, "%02d/%02d/%02d", day, month, year);
 4bc:	1f 92       	push	r1
 4be:	ff 92       	push	r15
 4c0:	1f 92       	push	r1
 4c2:	0f 93       	push	r16
 4c4:	1f 92       	push	r1
 4c6:	1f 93       	push	r17
 4c8:	8f e5       	ldi	r24, 0x5F	; 95
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	9f 93       	push	r25
 4ce:	8f 93       	push	r24
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <sprintf>
}
 4d8:	8d b7       	in	r24, 0x3d	; 61
 4da:	9e b7       	in	r25, 0x3e	; 62
 4dc:	0a 96       	adiw	r24, 0x0a	; 10
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	9e bf       	out	0x3e, r25	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	8d bf       	out	0x3d, r24	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	08 95       	ret

000004f4 <__vector_18>:
}


char SerialPort_Recive_Data(void){
	return UDR0;
}
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 506:	83 37       	cpi	r24, 0x73	; 115
 508:	11 f0       	breq	.+4      	; 0x50e <__vector_18+0x1a>
 50a:	83 35       	cpi	r24, 0x53	; 83
 50c:	39 f4       	brne	.+14     	; 0x51c <__vector_18+0x28>
 50e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <suspendFlag>
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	91 11       	cpse	r25, r1
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <suspendFlag>
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <SerialPort_Init>:
 52a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 52e:	96 e0       	ldi	r25, 0x06	; 6
 530:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 534:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 538:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 53c:	08 95       	ret

0000053e <SerialPort_TX_Enable>:
 53e:	e1 ec       	ldi	r30, 0xC1	; 193
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	88 60       	ori	r24, 0x08	; 8
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <SerialPort_RX_Enable>:
 54a:	e1 ec       	ldi	r30, 0xC1	; 193
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 61       	ori	r24, 0x10	; 16
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <SerialPort_RX_Interrupt_Enable>:
 556:	e1 ec       	ldi	r30, 0xC1	; 193
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	80 83       	st	Z, r24
 560:	08 95       	ret

00000562 <SerialPort_Wait_For_TX_Buffer_Free>:
 562:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 566:	85 ff       	sbrs	r24, 5
 568:	fc cf       	rjmp	.-8      	; 0x562 <SerialPort_Wait_For_TX_Buffer_Free>
 56a:	08 95       	ret

0000056c <SerialPort_Send_Data>:
 56c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 570:	08 95       	ret

00000572 <SerialPort_Send_String>:
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	7c 01       	movw	r14, r24
 57e:	c0 e0       	ldi	r28, 0x00	; 0
 580:	07 c0       	rjmp	.+14     	; 0x590 <SerialPort_Send_String+0x1e>
 582:	0e 94 b1 02 	call	0x562	; 0x562 <SerialPort_Wait_For_TX_Buffer_Free>
 586:	f8 01       	movw	r30, r16
 588:	80 81       	ld	r24, Z
 58a:	0e 94 b6 02 	call	0x56c	; 0x56c <SerialPort_Send_Data>
 58e:	cf 5f       	subi	r28, 0xFF	; 255
 590:	87 01       	movw	r16, r14
 592:	0c 0f       	add	r16, r28
 594:	11 1d       	adc	r17, r1
 596:	f8 01       	movw	r30, r16
 598:	80 81       	ld	r24, Z
 59a:	81 11       	cpse	r24, r1
 59c:	f2 cf       	rjmp	.-28     	; 0x582 <SerialPort_Send_String+0x10>
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	08 95       	ret

000005aa <SerialPort_Send_uint8_t>:


void SerialPort_Send_uint8_t(uint8_t num){
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	d8 2f       	mov	r29, r24
	
	SerialPort_Wait_For_TX_Buffer_Free();
 5b0:	0e 94 b1 02 	call	0x562	; 0x562 <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+num/10);
 5b4:	cd ec       	ldi	r28, 0xCD	; 205
 5b6:	dc 9f       	mul	r29, r28
 5b8:	c1 2d       	mov	r28, r1
 5ba:	11 24       	eor	r1, r1
 5bc:	c6 95       	lsr	r28
 5be:	c6 95       	lsr	r28
 5c0:	c6 95       	lsr	r28
 5c2:	80 e3       	ldi	r24, 0x30	; 48
 5c4:	8c 0f       	add	r24, r28
 5c6:	0e 94 b6 02 	call	0x56c	; 0x56c <SerialPort_Send_Data>
	
	SerialPort_Wait_For_TX_Buffer_Free();
 5ca:	0e 94 b1 02 	call	0x562	; 0x562 <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+ num%10);
 5ce:	cc 0f       	add	r28, r28
 5d0:	8c 2f       	mov	r24, r28
 5d2:	88 0f       	add	r24, r24
 5d4:	88 0f       	add	r24, r24
 5d6:	c8 0f       	add	r28, r24
 5d8:	8d 2f       	mov	r24, r29
 5da:	8c 1b       	sub	r24, r28
 5dc:	80 5d       	subi	r24, 0xD0	; 208
 5de:	0e 94 b6 02 	call	0x56c	; 0x56c <SerialPort_Send_Data>
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <sprintf>:
 5e8:	ae e0       	ldi	r26, 0x0E	; 14
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	ea ef       	ldi	r30, 0xFA	; 250
 5ee:	f2 e0       	ldi	r31, 0x02	; 2
 5f0:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__prologue_saves__+0x1c>
 5f4:	0d 89       	ldd	r16, Y+21	; 0x15
 5f6:	1e 89       	ldd	r17, Y+22	; 0x16
 5f8:	86 e0       	ldi	r24, 0x06	; 6
 5fa:	8c 83       	std	Y+4, r24	; 0x04
 5fc:	1a 83       	std	Y+2, r17	; 0x02
 5fe:	09 83       	std	Y+1, r16	; 0x01
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	9f e7       	ldi	r25, 0x7F	; 127
 604:	9e 83       	std	Y+6, r25	; 0x06
 606:	8d 83       	std	Y+5, r24	; 0x05
 608:	ae 01       	movw	r20, r28
 60a:	47 5e       	subi	r20, 0xE7	; 231
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	6f 89       	ldd	r22, Y+23	; 0x17
 610:	78 8d       	ldd	r23, Y+24	; 0x18
 612:	ce 01       	movw	r24, r28
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	0e 94 16 03 	call	0x62c	; 0x62c <vfprintf>
 61a:	ef 81       	ldd	r30, Y+7	; 0x07
 61c:	f8 85       	ldd	r31, Y+8	; 0x08
 61e:	e0 0f       	add	r30, r16
 620:	f1 1f       	adc	r31, r17
 622:	10 82       	st	Z, r1
 624:	2e 96       	adiw	r28, 0x0e	; 14
 626:	e4 e0       	ldi	r30, 0x04	; 4
 628:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__epilogue_restores__+0x1c>

0000062c <vfprintf>:
 62c:	ab e0       	ldi	r26, 0x0B	; 11
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	ec e1       	ldi	r30, 0x1C	; 28
 632:	f3 e0       	ldi	r31, 0x03	; 3
 634:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__prologue_saves__>
 638:	6c 01       	movw	r12, r24
 63a:	7b 01       	movw	r14, r22
 63c:	8a 01       	movw	r16, r20
 63e:	fc 01       	movw	r30, r24
 640:	17 82       	std	Z+7, r1	; 0x07
 642:	16 82       	std	Z+6, r1	; 0x06
 644:	83 81       	ldd	r24, Z+3	; 0x03
 646:	81 ff       	sbrs	r24, 1
 648:	cc c1       	rjmp	.+920    	; 0x9e2 <__stack+0xe3>
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	3c 01       	movw	r6, r24
 650:	f6 01       	movw	r30, r12
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	f7 01       	movw	r30, r14
 656:	93 fd       	sbrc	r25, 3
 658:	85 91       	lpm	r24, Z+
 65a:	93 ff       	sbrs	r25, 3
 65c:	81 91       	ld	r24, Z+
 65e:	7f 01       	movw	r14, r30
 660:	88 23       	and	r24, r24
 662:	09 f4       	brne	.+2      	; 0x666 <vfprintf+0x3a>
 664:	ba c1       	rjmp	.+884    	; 0x9da <__stack+0xdb>
 666:	85 32       	cpi	r24, 0x25	; 37
 668:	39 f4       	brne	.+14     	; 0x678 <vfprintf+0x4c>
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	7f 01       	movw	r14, r30
 674:	85 32       	cpi	r24, 0x25	; 37
 676:	29 f4       	brne	.+10     	; 0x682 <vfprintf+0x56>
 678:	b6 01       	movw	r22, r12
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 680:	e7 cf       	rjmp	.-50     	; 0x650 <vfprintf+0x24>
 682:	91 2c       	mov	r9, r1
 684:	21 2c       	mov	r2, r1
 686:	31 2c       	mov	r3, r1
 688:	ff e1       	ldi	r31, 0x1F	; 31
 68a:	f3 15       	cp	r31, r3
 68c:	d8 f0       	brcs	.+54     	; 0x6c4 <vfprintf+0x98>
 68e:	8b 32       	cpi	r24, 0x2B	; 43
 690:	79 f0       	breq	.+30     	; 0x6b0 <vfprintf+0x84>
 692:	38 f4       	brcc	.+14     	; 0x6a2 <vfprintf+0x76>
 694:	80 32       	cpi	r24, 0x20	; 32
 696:	79 f0       	breq	.+30     	; 0x6b6 <vfprintf+0x8a>
 698:	83 32       	cpi	r24, 0x23	; 35
 69a:	a1 f4       	brne	.+40     	; 0x6c4 <vfprintf+0x98>
 69c:	23 2d       	mov	r18, r3
 69e:	20 61       	ori	r18, 0x10	; 16
 6a0:	1d c0       	rjmp	.+58     	; 0x6dc <vfprintf+0xb0>
 6a2:	8d 32       	cpi	r24, 0x2D	; 45
 6a4:	61 f0       	breq	.+24     	; 0x6be <vfprintf+0x92>
 6a6:	80 33       	cpi	r24, 0x30	; 48
 6a8:	69 f4       	brne	.+26     	; 0x6c4 <vfprintf+0x98>
 6aa:	23 2d       	mov	r18, r3
 6ac:	21 60       	ori	r18, 0x01	; 1
 6ae:	16 c0       	rjmp	.+44     	; 0x6dc <vfprintf+0xb0>
 6b0:	83 2d       	mov	r24, r3
 6b2:	82 60       	ori	r24, 0x02	; 2
 6b4:	38 2e       	mov	r3, r24
 6b6:	e3 2d       	mov	r30, r3
 6b8:	e4 60       	ori	r30, 0x04	; 4
 6ba:	3e 2e       	mov	r3, r30
 6bc:	2a c0       	rjmp	.+84     	; 0x712 <vfprintf+0xe6>
 6be:	f3 2d       	mov	r31, r3
 6c0:	f8 60       	ori	r31, 0x08	; 8
 6c2:	1d c0       	rjmp	.+58     	; 0x6fe <vfprintf+0xd2>
 6c4:	37 fc       	sbrc	r3, 7
 6c6:	2d c0       	rjmp	.+90     	; 0x722 <vfprintf+0xf6>
 6c8:	20 ed       	ldi	r18, 0xD0	; 208
 6ca:	28 0f       	add	r18, r24
 6cc:	2a 30       	cpi	r18, 0x0A	; 10
 6ce:	40 f0       	brcs	.+16     	; 0x6e0 <vfprintf+0xb4>
 6d0:	8e 32       	cpi	r24, 0x2E	; 46
 6d2:	b9 f4       	brne	.+46     	; 0x702 <vfprintf+0xd6>
 6d4:	36 fc       	sbrc	r3, 6
 6d6:	81 c1       	rjmp	.+770    	; 0x9da <__stack+0xdb>
 6d8:	23 2d       	mov	r18, r3
 6da:	20 64       	ori	r18, 0x40	; 64
 6dc:	32 2e       	mov	r3, r18
 6de:	19 c0       	rjmp	.+50     	; 0x712 <vfprintf+0xe6>
 6e0:	36 fe       	sbrs	r3, 6
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0xc4>
 6e4:	8a e0       	ldi	r24, 0x0A	; 10
 6e6:	98 9e       	mul	r9, r24
 6e8:	20 0d       	add	r18, r0
 6ea:	11 24       	eor	r1, r1
 6ec:	92 2e       	mov	r9, r18
 6ee:	11 c0       	rjmp	.+34     	; 0x712 <vfprintf+0xe6>
 6f0:	ea e0       	ldi	r30, 0x0A	; 10
 6f2:	2e 9e       	mul	r2, r30
 6f4:	20 0d       	add	r18, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	22 2e       	mov	r2, r18
 6fa:	f3 2d       	mov	r31, r3
 6fc:	f0 62       	ori	r31, 0x20	; 32
 6fe:	3f 2e       	mov	r3, r31
 700:	08 c0       	rjmp	.+16     	; 0x712 <vfprintf+0xe6>
 702:	8c 36       	cpi	r24, 0x6C	; 108
 704:	21 f4       	brne	.+8      	; 0x70e <vfprintf+0xe2>
 706:	83 2d       	mov	r24, r3
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	38 2e       	mov	r3, r24
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0xe6>
 70e:	88 36       	cpi	r24, 0x68	; 104
 710:	41 f4       	brne	.+16     	; 0x722 <vfprintf+0xf6>
 712:	f7 01       	movw	r30, r14
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	7f 01       	movw	r14, r30
 71e:	81 11       	cpse	r24, r1
 720:	b3 cf       	rjmp	.-154    	; 0x688 <vfprintf+0x5c>
 722:	98 2f       	mov	r25, r24
 724:	9f 7d       	andi	r25, 0xDF	; 223
 726:	95 54       	subi	r25, 0x45	; 69
 728:	93 30       	cpi	r25, 0x03	; 3
 72a:	28 f4       	brcc	.+10     	; 0x736 <vfprintf+0x10a>
 72c:	0c 5f       	subi	r16, 0xFC	; 252
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	9f e3       	ldi	r25, 0x3F	; 63
 732:	99 83       	std	Y+1, r25	; 0x01
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x124>
 736:	83 36       	cpi	r24, 0x63	; 99
 738:	31 f0       	breq	.+12     	; 0x746 <vfprintf+0x11a>
 73a:	83 37       	cpi	r24, 0x73	; 115
 73c:	71 f0       	breq	.+28     	; 0x75a <vfprintf+0x12e>
 73e:	83 35       	cpi	r24, 0x53	; 83
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0x118>
 742:	59 c0       	rjmp	.+178    	; 0x7f6 <vfprintf+0x1ca>
 744:	21 c0       	rjmp	.+66     	; 0x788 <vfprintf+0x15c>
 746:	f8 01       	movw	r30, r16
 748:	80 81       	ld	r24, Z
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	88 24       	eor	r8, r8
 752:	83 94       	inc	r8
 754:	91 2c       	mov	r9, r1
 756:	53 01       	movw	r10, r6
 758:	13 c0       	rjmp	.+38     	; 0x780 <vfprintf+0x154>
 75a:	28 01       	movw	r4, r16
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	4f 0e       	add	r4, r31
 760:	51 1c       	adc	r5, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	36 fe       	sbrs	r3, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x146>
 76c:	69 2d       	mov	r22, r9
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x14a>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	0e 94 02 05 	call	0xa04	; 0xa04 <strnlen>
 77c:	4c 01       	movw	r8, r24
 77e:	82 01       	movw	r16, r4
 780:	f3 2d       	mov	r31, r3
 782:	ff 77       	andi	r31, 0x7F	; 127
 784:	3f 2e       	mov	r3, r31
 786:	16 c0       	rjmp	.+44     	; 0x7b4 <vfprintf+0x188>
 788:	28 01       	movw	r4, r16
 78a:	22 e0       	ldi	r18, 0x02	; 2
 78c:	42 0e       	add	r4, r18
 78e:	51 1c       	adc	r5, r1
 790:	f8 01       	movw	r30, r16
 792:	a0 80       	ld	r10, Z
 794:	b1 80       	ldd	r11, Z+1	; 0x01
 796:	36 fe       	sbrs	r3, 6
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <vfprintf+0x174>
 79a:	69 2d       	mov	r22, r9
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0x178>
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	7f ef       	ldi	r23, 0xFF	; 255
 7a4:	c5 01       	movw	r24, r10
 7a6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <strnlen_P>
 7aa:	4c 01       	movw	r8, r24
 7ac:	f3 2d       	mov	r31, r3
 7ae:	f0 68       	ori	r31, 0x80	; 128
 7b0:	3f 2e       	mov	r3, r31
 7b2:	82 01       	movw	r16, r4
 7b4:	33 fc       	sbrc	r3, 3
 7b6:	1b c0       	rjmp	.+54     	; 0x7ee <vfprintf+0x1c2>
 7b8:	82 2d       	mov	r24, r2
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	88 16       	cp	r8, r24
 7be:	99 06       	cpc	r9, r25
 7c0:	b0 f4       	brcc	.+44     	; 0x7ee <vfprintf+0x1c2>
 7c2:	b6 01       	movw	r22, r12
 7c4:	80 e2       	ldi	r24, 0x20	; 32
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 7cc:	2a 94       	dec	r2
 7ce:	f4 cf       	rjmp	.-24     	; 0x7b8 <vfprintf+0x18c>
 7d0:	f5 01       	movw	r30, r10
 7d2:	37 fc       	sbrc	r3, 7
 7d4:	85 91       	lpm	r24, Z+
 7d6:	37 fe       	sbrs	r3, 7
 7d8:	81 91       	ld	r24, Z+
 7da:	5f 01       	movw	r10, r30
 7dc:	b6 01       	movw	r22, r12
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 7e4:	21 10       	cpse	r2, r1
 7e6:	2a 94       	dec	r2
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	82 1a       	sub	r8, r18
 7ec:	91 08       	sbc	r9, r1
 7ee:	81 14       	cp	r8, r1
 7f0:	91 04       	cpc	r9, r1
 7f2:	71 f7       	brne	.-36     	; 0x7d0 <vfprintf+0x1a4>
 7f4:	e8 c0       	rjmp	.+464    	; 0x9c6 <__stack+0xc7>
 7f6:	84 36       	cpi	r24, 0x64	; 100
 7f8:	11 f0       	breq	.+4      	; 0x7fe <vfprintf+0x1d2>
 7fa:	89 36       	cpi	r24, 0x69	; 105
 7fc:	41 f5       	brne	.+80     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7fe:	f8 01       	movw	r30, r16
 800:	37 fe       	sbrs	r3, 7
 802:	07 c0       	rjmp	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	82 81       	ldd	r24, Z+2	; 0x02
 80a:	93 81       	ldd	r25, Z+3	; 0x03
 80c:	0c 5f       	subi	r16, 0xFC	; 252
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	08 c0       	rjmp	.+16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	07 2e       	mov	r0, r23
 818:	00 0c       	add	r0, r0
 81a:	88 0b       	sbc	r24, r24
 81c:	99 0b       	sbc	r25, r25
 81e:	0e 5f       	subi	r16, 0xFE	; 254
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	f3 2d       	mov	r31, r3
 824:	ff 76       	andi	r31, 0x6F	; 111
 826:	3f 2e       	mov	r3, r31
 828:	97 ff       	sbrs	r25, 7
 82a:	09 c0       	rjmp	.+18     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	f0 68       	ori	r31, 0x80	; 128
 83c:	3f 2e       	mov	r3, r31
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	a3 01       	movw	r20, r6
 844:	0e 94 49 05 	call	0xa92	; 0xa92 <__ultoa_invert>
 848:	88 2e       	mov	r8, r24
 84a:	86 18       	sub	r8, r6
 84c:	45 c0       	rjmp	.+138    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 84e:	85 37       	cpi	r24, 0x75	; 117
 850:	31 f4       	brne	.+12     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 852:	23 2d       	mov	r18, r3
 854:	2f 7e       	andi	r18, 0xEF	; 239
 856:	b2 2e       	mov	r11, r18
 858:	2a e0       	ldi	r18, 0x0A	; 10
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	25 c0       	rjmp	.+74     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 85e:	93 2d       	mov	r25, r3
 860:	99 7f       	andi	r25, 0xF9	; 249
 862:	b9 2e       	mov	r11, r25
 864:	8f 36       	cpi	r24, 0x6F	; 111
 866:	c1 f0       	breq	.+48     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 868:	18 f4       	brcc	.+6      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86a:	88 35       	cpi	r24, 0x58	; 88
 86c:	79 f0       	breq	.+30     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 86e:	b5 c0       	rjmp	.+362    	; 0x9da <__stack+0xdb>
 870:	80 37       	cpi	r24, 0x70	; 112
 872:	19 f0       	breq	.+6      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 874:	88 37       	cpi	r24, 0x78	; 120
 876:	21 f0       	breq	.+8      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 878:	b0 c0       	rjmp	.+352    	; 0x9da <__stack+0xdb>
 87a:	e9 2f       	mov	r30, r25
 87c:	e0 61       	ori	r30, 0x10	; 16
 87e:	be 2e       	mov	r11, r30
 880:	b4 fe       	sbrs	r11, 4
 882:	0d c0       	rjmp	.+26     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 884:	fb 2d       	mov	r31, r11
 886:	f4 60       	ori	r31, 0x04	; 4
 888:	bf 2e       	mov	r11, r31
 88a:	09 c0       	rjmp	.+18     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 88c:	34 fe       	sbrs	r3, 4
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 890:	29 2f       	mov	r18, r25
 892:	26 60       	ori	r18, 0x06	; 6
 894:	b2 2e       	mov	r11, r18
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 89e:	20 e1       	ldi	r18, 0x10	; 16
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a4:	20 e1       	ldi	r18, 0x10	; 16
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	f8 01       	movw	r30, r16
 8aa:	b7 fe       	sbrs	r11, 7
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	82 81       	ldd	r24, Z+2	; 0x02
 8b4:	93 81       	ldd	r25, Z+3	; 0x03
 8b6:	0c 5f       	subi	r16, 0xFC	; 252
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	a3 01       	movw	r20, r6
 8ca:	0e 94 49 05 	call	0xa92	; 0xa92 <__ultoa_invert>
 8ce:	88 2e       	mov	r8, r24
 8d0:	86 18       	sub	r8, r6
 8d2:	fb 2d       	mov	r31, r11
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	3f 2e       	mov	r3, r31
 8d8:	36 fe       	sbrs	r3, 6
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8dc:	23 2d       	mov	r18, r3
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	a2 2e       	mov	r10, r18
 8e2:	89 14       	cp	r8, r9
 8e4:	58 f4       	brcc	.+22     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8e6:	34 fe       	sbrs	r3, 4
 8e8:	0b c0       	rjmp	.+22     	; 0x900 <__stack+0x1>
 8ea:	32 fc       	sbrc	r3, 2
 8ec:	09 c0       	rjmp	.+18     	; 0x900 <__stack+0x1>
 8ee:	83 2d       	mov	r24, r3
 8f0:	8e 7e       	andi	r24, 0xEE	; 238
 8f2:	a8 2e       	mov	r10, r24
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <__stack+0x1>
 8f6:	b8 2c       	mov	r11, r8
 8f8:	a3 2c       	mov	r10, r3
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
 8fc:	b8 2c       	mov	r11, r8
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
 900:	b9 2c       	mov	r11, r9
 902:	a4 fe       	sbrs	r10, 4
 904:	0f c0       	rjmp	.+30     	; 0x924 <__stack+0x25>
 906:	fe 01       	movw	r30, r28
 908:	e8 0d       	add	r30, r8
 90a:	f1 1d       	adc	r31, r1
 90c:	80 81       	ld	r24, Z
 90e:	80 33       	cpi	r24, 0x30	; 48
 910:	21 f4       	brne	.+8      	; 0x91a <__stack+0x1b>
 912:	9a 2d       	mov	r25, r10
 914:	99 7e       	andi	r25, 0xE9	; 233
 916:	a9 2e       	mov	r10, r25
 918:	09 c0       	rjmp	.+18     	; 0x92c <__stack+0x2d>
 91a:	a2 fe       	sbrs	r10, 2
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0x2b>
 91e:	b3 94       	inc	r11
 920:	b3 94       	inc	r11
 922:	04 c0       	rjmp	.+8      	; 0x92c <__stack+0x2d>
 924:	8a 2d       	mov	r24, r10
 926:	86 78       	andi	r24, 0x86	; 134
 928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
 92a:	b3 94       	inc	r11
 92c:	a3 fc       	sbrc	r10, 3
 92e:	11 c0       	rjmp	.+34     	; 0x952 <__stack+0x53>
 930:	a0 fe       	sbrs	r10, 0
 932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0x41>
 934:	b2 14       	cp	r11, r2
 936:	88 f4       	brcc	.+34     	; 0x95a <__stack+0x5b>
 938:	28 0c       	add	r2, r8
 93a:	92 2c       	mov	r9, r2
 93c:	9b 18       	sub	r9, r11
 93e:	0e c0       	rjmp	.+28     	; 0x95c <__stack+0x5d>
 940:	b2 14       	cp	r11, r2
 942:	60 f4       	brcc	.+24     	; 0x95c <__stack+0x5d>
 944:	b6 01       	movw	r22, r12
 946:	80 e2       	ldi	r24, 0x20	; 32
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 94e:	b3 94       	inc	r11
 950:	f7 cf       	rjmp	.-18     	; 0x940 <__stack+0x41>
 952:	b2 14       	cp	r11, r2
 954:	18 f4       	brcc	.+6      	; 0x95c <__stack+0x5d>
 956:	2b 18       	sub	r2, r11
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	98 2c       	mov	r9, r8
 95c:	21 2c       	mov	r2, r1
 95e:	a4 fe       	sbrs	r10, 4
 960:	10 c0       	rjmp	.+32     	; 0x982 <__stack+0x83>
 962:	b6 01       	movw	r22, r12
 964:	80 e3       	ldi	r24, 0x30	; 48
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 96c:	a2 fe       	sbrs	r10, 2
 96e:	17 c0       	rjmp	.+46     	; 0x99e <__stack+0x9f>
 970:	a1 fc       	sbrc	r10, 1
 972:	03 c0       	rjmp	.+6      	; 0x97a <__stack+0x7b>
 974:	88 e7       	ldi	r24, 0x78	; 120
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	88 e5       	ldi	r24, 0x58	; 88
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	b6 01       	movw	r22, r12
 980:	0c c0       	rjmp	.+24     	; 0x99a <__stack+0x9b>
 982:	8a 2d       	mov	r24, r10
 984:	86 78       	andi	r24, 0x86	; 134
 986:	59 f0       	breq	.+22     	; 0x99e <__stack+0x9f>
 988:	a1 fe       	sbrs	r10, 1
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	8b e2       	ldi	r24, 0x2B	; 43
 98e:	01 c0       	rjmp	.+2      	; 0x992 <__stack+0x93>
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	a7 fc       	sbrc	r10, 7
 994:	8d e2       	ldi	r24, 0x2D	; 45
 996:	b6 01       	movw	r22, r12
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 99e:	89 14       	cp	r8, r9
 9a0:	38 f4       	brcc	.+14     	; 0x9b0 <__stack+0xb1>
 9a2:	b6 01       	movw	r22, r12
 9a4:	80 e3       	ldi	r24, 0x30	; 48
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9ac:	9a 94       	dec	r9
 9ae:	f7 cf       	rjmp	.-18     	; 0x99e <__stack+0x9f>
 9b0:	8a 94       	dec	r8
 9b2:	f3 01       	movw	r30, r6
 9b4:	e8 0d       	add	r30, r8
 9b6:	f1 1d       	adc	r31, r1
 9b8:	80 81       	ld	r24, Z
 9ba:	b6 01       	movw	r22, r12
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9c2:	81 10       	cpse	r8, r1
 9c4:	f5 cf       	rjmp	.-22     	; 0x9b0 <__stack+0xb1>
 9c6:	22 20       	and	r2, r2
 9c8:	09 f4       	brne	.+2      	; 0x9cc <__stack+0xcd>
 9ca:	42 ce       	rjmp	.-892    	; 0x650 <vfprintf+0x24>
 9cc:	b6 01       	movw	r22, r12
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <fputc>
 9d6:	2a 94       	dec	r2
 9d8:	f6 cf       	rjmp	.-20     	; 0x9c6 <__stack+0xc7>
 9da:	f6 01       	movw	r30, r12
 9dc:	86 81       	ldd	r24, Z+6	; 0x06
 9de:	97 81       	ldd	r25, Z+7	; 0x07
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__stack+0xe7>
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	9f ef       	ldi	r25, 0xFF	; 255
 9e6:	2b 96       	adiw	r28, 0x0b	; 11
 9e8:	e2 e1       	ldi	r30, 0x12	; 18
 9ea:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__epilogue_restores__>

000009ee <strnlen_P>:
 9ee:	fc 01       	movw	r30, r24
 9f0:	05 90       	lpm	r0, Z+
 9f2:	61 50       	subi	r22, 0x01	; 1
 9f4:	70 40       	sbci	r23, 0x00	; 0
 9f6:	01 10       	cpse	r0, r1
 9f8:	d8 f7       	brcc	.-10     	; 0x9f0 <strnlen_P+0x2>
 9fa:	80 95       	com	r24
 9fc:	90 95       	com	r25
 9fe:	8e 0f       	add	r24, r30
 a00:	9f 1f       	adc	r25, r31
 a02:	08 95       	ret

00000a04 <strnlen>:
 a04:	fc 01       	movw	r30, r24
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 90       	ld	r0, Z+
 a0c:	01 10       	cpse	r0, r1
 a0e:	d8 f7       	brcc	.-10     	; 0xa06 <strnlen+0x2>
 a10:	80 95       	com	r24
 a12:	90 95       	com	r25
 a14:	8e 0f       	add	r24, r30
 a16:	9f 1f       	adc	r25, r31
 a18:	08 95       	ret

00000a1a <fputc>:
 a1a:	0f 93       	push	r16
 a1c:	1f 93       	push	r17
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
 a22:	fb 01       	movw	r30, r22
 a24:	23 81       	ldd	r18, Z+3	; 0x03
 a26:	21 fd       	sbrc	r18, 1
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <fputc+0x16>
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	9f ef       	ldi	r25, 0xFF	; 255
 a2e:	2c c0       	rjmp	.+88     	; 0xa88 <fputc+0x6e>
 a30:	22 ff       	sbrs	r18, 2
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <fputc+0x46>
 a34:	46 81       	ldd	r20, Z+6	; 0x06
 a36:	57 81       	ldd	r21, Z+7	; 0x07
 a38:	24 81       	ldd	r18, Z+4	; 0x04
 a3a:	35 81       	ldd	r19, Z+5	; 0x05
 a3c:	42 17       	cp	r20, r18
 a3e:	53 07       	cpc	r21, r19
 a40:	44 f4       	brge	.+16     	; 0xa52 <fputc+0x38>
 a42:	a0 81       	ld	r26, Z
 a44:	b1 81       	ldd	r27, Z+1	; 0x01
 a46:	9d 01       	movw	r18, r26
 a48:	2f 5f       	subi	r18, 0xFF	; 255
 a4a:	3f 4f       	sbci	r19, 0xFF	; 255
 a4c:	31 83       	std	Z+1, r19	; 0x01
 a4e:	20 83       	st	Z, r18
 a50:	8c 93       	st	X, r24
 a52:	26 81       	ldd	r18, Z+6	; 0x06
 a54:	37 81       	ldd	r19, Z+7	; 0x07
 a56:	2f 5f       	subi	r18, 0xFF	; 255
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	37 83       	std	Z+7, r19	; 0x07
 a5c:	26 83       	std	Z+6, r18	; 0x06
 a5e:	14 c0       	rjmp	.+40     	; 0xa88 <fputc+0x6e>
 a60:	8b 01       	movw	r16, r22
 a62:	ec 01       	movw	r28, r24
 a64:	fb 01       	movw	r30, r22
 a66:	00 84       	ldd	r0, Z+8	; 0x08
 a68:	f1 85       	ldd	r31, Z+9	; 0x09
 a6a:	e0 2d       	mov	r30, r0
 a6c:	09 95       	icall
 a6e:	89 2b       	or	r24, r25
 a70:	e1 f6       	brne	.-72     	; 0xa2a <fputc+0x10>
 a72:	d8 01       	movw	r26, r16
 a74:	16 96       	adiw	r26, 0x06	; 6
 a76:	8d 91       	ld	r24, X+
 a78:	9c 91       	ld	r25, X
 a7a:	17 97       	sbiw	r26, 0x07	; 7
 a7c:	01 96       	adiw	r24, 0x01	; 1
 a7e:	17 96       	adiw	r26, 0x07	; 7
 a80:	9c 93       	st	X, r25
 a82:	8e 93       	st	-X, r24
 a84:	16 97       	sbiw	r26, 0x06	; 6
 a86:	ce 01       	movw	r24, r28
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	1f 91       	pop	r17
 a8e:	0f 91       	pop	r16
 a90:	08 95       	ret

00000a92 <__ultoa_invert>:
 a92:	fa 01       	movw	r30, r20
 a94:	aa 27       	eor	r26, r26
 a96:	28 30       	cpi	r18, 0x08	; 8
 a98:	51 f1       	breq	.+84     	; 0xaee <__ultoa_invert+0x5c>
 a9a:	20 31       	cpi	r18, 0x10	; 16
 a9c:	81 f1       	breq	.+96     	; 0xafe <__ultoa_invert+0x6c>
 a9e:	e8 94       	clt
 aa0:	6f 93       	push	r22
 aa2:	6e 7f       	andi	r22, 0xFE	; 254
 aa4:	6e 5f       	subi	r22, 0xFE	; 254
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	af 4f       	sbci	r26, 0xFF	; 255
 aae:	b1 e0       	ldi	r27, 0x01	; 1
 ab0:	3e d0       	rcall	.+124    	; 0xb2e <__ultoa_invert+0x9c>
 ab2:	b4 e0       	ldi	r27, 0x04	; 4
 ab4:	3c d0       	rcall	.+120    	; 0xb2e <__ultoa_invert+0x9c>
 ab6:	67 0f       	add	r22, r23
 ab8:	78 1f       	adc	r23, r24
 aba:	89 1f       	adc	r24, r25
 abc:	9a 1f       	adc	r25, r26
 abe:	a1 1d       	adc	r26, r1
 ac0:	68 0f       	add	r22, r24
 ac2:	79 1f       	adc	r23, r25
 ac4:	8a 1f       	adc	r24, r26
 ac6:	91 1d       	adc	r25, r1
 ac8:	a1 1d       	adc	r26, r1
 aca:	6a 0f       	add	r22, r26
 acc:	71 1d       	adc	r23, r1
 ace:	81 1d       	adc	r24, r1
 ad0:	91 1d       	adc	r25, r1
 ad2:	a1 1d       	adc	r26, r1
 ad4:	20 d0       	rcall	.+64     	; 0xb16 <__ultoa_invert+0x84>
 ad6:	09 f4       	brne	.+2      	; 0xada <__ultoa_invert+0x48>
 ad8:	68 94       	set
 ada:	3f 91       	pop	r19
 adc:	2a e0       	ldi	r18, 0x0A	; 10
 ade:	26 9f       	mul	r18, r22
 ae0:	11 24       	eor	r1, r1
 ae2:	30 19       	sub	r19, r0
 ae4:	30 5d       	subi	r19, 0xD0	; 208
 ae6:	31 93       	st	Z+, r19
 ae8:	de f6       	brtc	.-74     	; 0xaa0 <__ultoa_invert+0xe>
 aea:	cf 01       	movw	r24, r30
 aec:	08 95       	ret
 aee:	46 2f       	mov	r20, r22
 af0:	47 70       	andi	r20, 0x07	; 7
 af2:	40 5d       	subi	r20, 0xD0	; 208
 af4:	41 93       	st	Z+, r20
 af6:	b3 e0       	ldi	r27, 0x03	; 3
 af8:	0f d0       	rcall	.+30     	; 0xb18 <__ultoa_invert+0x86>
 afa:	c9 f7       	brne	.-14     	; 0xaee <__ultoa_invert+0x5c>
 afc:	f6 cf       	rjmp	.-20     	; 0xaea <__ultoa_invert+0x58>
 afe:	46 2f       	mov	r20, r22
 b00:	4f 70       	andi	r20, 0x0F	; 15
 b02:	40 5d       	subi	r20, 0xD0	; 208
 b04:	4a 33       	cpi	r20, 0x3A	; 58
 b06:	18 f0       	brcs	.+6      	; 0xb0e <__ultoa_invert+0x7c>
 b08:	49 5d       	subi	r20, 0xD9	; 217
 b0a:	31 fd       	sbrc	r19, 1
 b0c:	40 52       	subi	r20, 0x20	; 32
 b0e:	41 93       	st	Z+, r20
 b10:	02 d0       	rcall	.+4      	; 0xb16 <__ultoa_invert+0x84>
 b12:	a9 f7       	brne	.-22     	; 0xafe <__ultoa_invert+0x6c>
 b14:	ea cf       	rjmp	.-44     	; 0xaea <__ultoa_invert+0x58>
 b16:	b4 e0       	ldi	r27, 0x04	; 4
 b18:	a6 95       	lsr	r26
 b1a:	97 95       	ror	r25
 b1c:	87 95       	ror	r24
 b1e:	77 95       	ror	r23
 b20:	67 95       	ror	r22
 b22:	ba 95       	dec	r27
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__ultoa_invert+0x86>
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	61 05       	cpc	r22, r1
 b2a:	71 05       	cpc	r23, r1
 b2c:	08 95       	ret
 b2e:	9b 01       	movw	r18, r22
 b30:	ac 01       	movw	r20, r24
 b32:	0a 2e       	mov	r0, r26
 b34:	06 94       	lsr	r0
 b36:	57 95       	ror	r21
 b38:	47 95       	ror	r20
 b3a:	37 95       	ror	r19
 b3c:	27 95       	ror	r18
 b3e:	ba 95       	dec	r27
 b40:	c9 f7       	brne	.-14     	; 0xb34 <__ultoa_invert+0xa2>
 b42:	62 0f       	add	r22, r18
 b44:	73 1f       	adc	r23, r19
 b46:	84 1f       	adc	r24, r20
 b48:	95 1f       	adc	r25, r21
 b4a:	a0 1d       	adc	r26, r0
 b4c:	08 95       	ret

00000b4e <__prologue_saves__>:
 b4e:	2f 92       	push	r2
 b50:	3f 92       	push	r3
 b52:	4f 92       	push	r4
 b54:	5f 92       	push	r5
 b56:	6f 92       	push	r6
 b58:	7f 92       	push	r7
 b5a:	8f 92       	push	r8
 b5c:	9f 92       	push	r9
 b5e:	af 92       	push	r10
 b60:	bf 92       	push	r11
 b62:	cf 92       	push	r12
 b64:	df 92       	push	r13
 b66:	ef 92       	push	r14
 b68:	ff 92       	push	r15
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	cd b7       	in	r28, 0x3d	; 61
 b74:	de b7       	in	r29, 0x3e	; 62
 b76:	ca 1b       	sub	r28, r26
 b78:	db 0b       	sbc	r29, r27
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	f8 94       	cli
 b7e:	de bf       	out	0x3e, r29	; 62
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	cd bf       	out	0x3d, r28	; 61
 b84:	09 94       	ijmp

00000b86 <__epilogue_restores__>:
 b86:	2a 88       	ldd	r2, Y+18	; 0x12
 b88:	39 88       	ldd	r3, Y+17	; 0x11
 b8a:	48 88       	ldd	r4, Y+16	; 0x10
 b8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b90:	7d 84       	ldd	r7, Y+13	; 0x0d
 b92:	8c 84       	ldd	r8, Y+12	; 0x0c
 b94:	9b 84       	ldd	r9, Y+11	; 0x0b
 b96:	aa 84       	ldd	r10, Y+10	; 0x0a
 b98:	b9 84       	ldd	r11, Y+9	; 0x09
 b9a:	c8 84       	ldd	r12, Y+8	; 0x08
 b9c:	df 80       	ldd	r13, Y+7	; 0x07
 b9e:	ee 80       	ldd	r14, Y+6	; 0x06
 ba0:	fd 80       	ldd	r15, Y+5	; 0x05
 ba2:	0c 81       	ldd	r16, Y+4	; 0x04
 ba4:	1b 81       	ldd	r17, Y+3	; 0x03
 ba6:	aa 81       	ldd	r26, Y+2	; 0x02
 ba8:	b9 81       	ldd	r27, Y+1	; 0x01
 baa:	ce 0f       	add	r28, r30
 bac:	d1 1d       	adc	r29, r1
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	de bf       	out	0x3e, r29	; 62
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	cd bf       	out	0x3d, r28	; 61
 bb8:	ed 01       	movw	r28, r26
 bba:	08 95       	ret

00000bbc <_exit>:
 bbc:	f8 94       	cli

00000bbe <__stop_program>:
 bbe:	ff cf       	rjmp	.-2      	; 0xbbe <__stop_program>
