
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000bc8  00000c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800174  00800174  00000cd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a2  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a98  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9f  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e0  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000980  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 37       	cpi	r26, 0x7C	; 124
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 38 01 	call	0x270	; 0x270 <main>
  9e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LeerDHT>:
#define TIMEOUT 1000 // Timeout para esperar el cambio de estado del pin

static uint8_t humedad;
static uint8_t temperatura;

int LeerDHT() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <LeerDHT+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <LeerDHT+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	// Recepción de datos
	uint8_t data[5] = {0};
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	df 01       	movw	r26, r30
  bc:	1d 92       	st	X+, r1
  be:	8a 95       	dec	r24
  c0:	e9 f7       	brne	.-6      	; 0xbc <LeerDHT+0x16>
	uint16_t timeout = 0;

	// Iniciar comunicación con el sensor
	DDRC |= (1 << PINC0);
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC0);
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LeerDHT+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LeerDHT+0x32>
  d8:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1 << PINC0);
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	88 b9       	out	0x08, r24	; 8
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	a9 ef       	ldi	r26, 0xF9	; 249
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	a0 40       	sbci	r26, 0x00	; 0
  ea:	b0 40       	sbci	r27, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LeerDHT+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LeerDHT+0x4a>
  f0:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1 << PINC0);
  f2:	88 b1       	in	r24, 0x08	; 8
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0);
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	87 b9       	out	0x07, r24	; 7

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 102:	05 c0       	rjmp	.+10     	; 0x10e <LeerDHT+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	25 e0       	ldi	r18, 0x05	; 5
 106:	2a 95       	dec	r18
 108:	f1 f7       	brne	.-4      	; 0x106 <LeerDHT+0x60>
 10a:	00 00       	nop
		_delay_us(1);
		timeout++;
 10c:	01 96       	adiw	r24, 0x01	; 1
	PORTC |= (1 << PINC0);
	DDRC &= ~(1 << PINC0);

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 10e:	30 9b       	sbis	0x06, 0	; 6
 110:	04 c0       	rjmp	.+8      	; 0x11a <LeerDHT+0x74>
 112:	88 3e       	cpi	r24, 0xE8	; 232
 114:	a3 e0       	ldi	r26, 0x03	; 3
 116:	9a 07       	cpc	r25, r26
 118:	a8 f3       	brcs	.-22     	; 0x104 <LeerDHT+0x5e>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 11a:	88 3e       	cpi	r24, 0xE8	; 232
 11c:	93 40       	sbci	r25, 0x03	; 3
 11e:	08 f0       	brcs	.+2      	; 0x122 <LeerDHT+0x7c>
 120:	6d c0       	rjmp	.+218    	; 0x1fc <LeerDHT+0x156>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	05 c0       	rjmp	.+10     	; 0x132 <LeerDHT+0x8c>
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	2a 95       	dec	r18
 12c:	f1 f7       	brne	.-4      	; 0x12a <LeerDHT+0x84>
 12e:	00 00       	nop

	// Esperar hasta que el pin se vuelva alto
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
 130:	01 96       	adiw	r24, 0x01	; 1
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Esperar hasta que el pin se vuelva alto
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 132:	30 99       	sbic	0x06, 0	; 6
 134:	04 c0       	rjmp	.+8      	; 0x13e <LeerDHT+0x98>
 136:	88 3e       	cpi	r24, 0xE8	; 232
 138:	a3 e0       	ldi	r26, 0x03	; 3
 13a:	9a 07       	cpc	r25, r26
 13c:	a8 f3       	brcs	.-22     	; 0x128 <LeerDHT+0x82>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 13e:	88 3e       	cpi	r24, 0xE8	; 232
 140:	93 40       	sbci	r25, 0x03	; 3
 142:	08 f0       	brcs	.+2      	; 0x146 <LeerDHT+0xa0>
 144:	5e c0       	rjmp	.+188    	; 0x202 <LeerDHT+0x15c>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <LeerDHT+0xb0>
 14c:	25 e0       	ldi	r18, 0x05	; 5
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <LeerDHT+0xa8>
 152:	00 00       	nop

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
 154:	01 96       	adiw	r24, 0x01	; 1
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Esperar hasta que el pin se vuelva bajo
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
 156:	30 9b       	sbis	0x06, 0	; 6
 158:	04 c0       	rjmp	.+8      	; 0x162 <LeerDHT+0xbc>
 15a:	88 3e       	cpi	r24, 0xE8	; 232
 15c:	a3 e0       	ldi	r26, 0x03	; 3
 15e:	9a 07       	cpc	r25, r26
 160:	a8 f3       	brcs	.-22     	; 0x14c <LeerDHT+0xa6>
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 162:	88 3e       	cpi	r24, 0xE8	; 232
 164:	93 40       	sbci	r25, 0x03	; 3
 166:	08 f0       	brcs	.+2      	; 0x16a <LeerDHT+0xc4>
 168:	4f c0       	rjmp	.+158    	; 0x208 <LeerDHT+0x162>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	2b c0       	rjmp	.+86     	; 0x1c6 <LeerDHT+0x120>
 170:	25 e0       	ldi	r18, 0x05	; 5
 172:	2a 95       	dec	r18
 174:	f1 f7       	brne	.-4      	; 0x172 <LeerDHT+0xcc>
 176:	00 00       	nop

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
			// Esperar hasta que el pin se vuelva alto
			while(!(PINC & (1 << PINC0))) {
 178:	30 9b       	sbis	0x06, 0	; 6
 17a:	fa cf       	rjmp	.-12     	; 0x170 <LeerDHT+0xca>
 17c:	a0 ea       	ldi	r26, 0xA0	; 160
 17e:	aa 95       	dec	r26
 180:	f1 f7       	brne	.-4      	; 0x17e <LeerDHT+0xd8>
				_delay_us(1);
			}

			_delay_us(30);
			if(PINC & (1 << PINC0)) {
 182:	30 9b       	sbis	0x06, 0	; 6
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <LeerDHT+0x10c>
				data[i] |= (1 << j); // Si la duración es mayor a 30us, el bit es un 1
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 2e       	mov	r0, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <LeerDHT+0xec>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <LeerDHT+0xe8>
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	e4 0f       	add	r30, r20
 1a0:	f5 1f       	adc	r31, r21
 1a2:	30 81       	ld	r19, Z
 1a4:	23 2b       	or	r18, r19
 1a6:	20 83       	st	Z, r18
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <LeerDHT+0x10c>
 1aa:	b5 e0       	ldi	r27, 0x05	; 5
 1ac:	ba 95       	dec	r27
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LeerDHT+0x106>
 1b0:	00 00       	nop
			}

			// Esperar hasta que el pin se vuelva bajo
			timeout = 0;
			while(PINC & (1 << PINC0)) {
 1b2:	30 99       	sbic	0x06, 0	; 6
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <LeerDHT+0x104>
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
		for (int j = 7; j >= 0; j--) {
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <LeerDHT+0x118>
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	99 23       	and	r25, r25
 1c0:	dc f6       	brge	.-74     	; 0x178 <LeerDHT+0xd2>
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;

	// Leer los 5 bytes de datos
	for (int i = 0; i < 5; i++) {
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	45 30       	cpi	r20, 0x05	; 5
 1c8:	51 05       	cpc	r21, r1
 1ca:	bc f3       	brlt	.-18     	; 0x1ba <LeerDHT+0x114>
			}
		}
	}

	// Verificar checksum
	if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 1cc:	2d 81       	ldd	r18, Y+5	; 0x05
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	59 81       	ldd	r21, Y+1	; 0x01
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	85 0f       	add	r24, r21
 1d8:	91 1d       	adc	r25, r1
 1da:	4b 81       	ldd	r20, Y+3	; 0x03
 1dc:	84 0f       	add	r24, r20
 1de:	91 1d       	adc	r25, r1
 1e0:	6c 81       	ldd	r22, Y+4	; 0x04
 1e2:	86 0f       	add	r24, r22
 1e4:	91 1d       	adc	r25, r1
 1e6:	99 27       	eor	r25, r25
 1e8:	28 17       	cp	r18, r24
 1ea:	39 07       	cpc	r19, r25
 1ec:	81 f4       	brne	.+32     	; 0x20e <LeerDHT+0x168>
		// Decodificar datos
		humedad = data[0];
 1ee:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <humedad>
		temperatura = data[2];
 1f2:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <__data_end>
		return DHTLIB_OK; // Lectura exitosa
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 1fc:	8e ef       	ldi	r24, 0xFE	; 254
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	08 c0       	rjmp	.+16     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while(!(PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 202:	8e ef       	ldi	r24, 0xFE	; 254
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	05 c0       	rjmp	.+10     	; 0x212 <LeerDHT+0x16c>
	timeout = 0;
	while((PINC & (1 << PINC0)) && timeout < TIMEOUT) {
		_delay_us(1);
		timeout++;
	}
	if (timeout >= TIMEOUT) return DHTLIB_ERROR_TIMEOUT;
 208:	8e ef       	ldi	r24, 0xFE	; 254
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	02 c0       	rjmp	.+4      	; 0x212 <LeerDHT+0x16c>
		// Decodificar datos
		humedad = data[0];
		temperatura = data[2];
		return DHTLIB_OK; // Lectura exitosa
		} else {
		return DHTLIB_ERROR_CHECKSUM; // Error de checksum
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <getHumedad>:

uint8_t getHumedad() {
	return humedad;
}
 222:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <humedad>
 226:	08 95       	ret

00000228 <getTemperatura>:

uint8_t getTemperatura() {
	return temperatura;
 228:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
 22c:	08 95       	ret

0000022e <configurarTimer1>:
		}


// Función para configurar el Timer1
void configurarTimer1() {
	TCCR1A = 0;
 22e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10); // Modo CTC, prescaler de 64
 232:	e1 e8       	ldi	r30, 0x81	; 129
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	8b 60       	ori	r24, 0x0B	; 11
 23a:	80 83       	st	Z, r24
	OCR1A = 249; // Configurar OCR1A para que el comparador coincida cada 1 milisegundo
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Habilitar interrupción de comparador A
 248:	ef e6       	ldi	r30, 0x6F	; 111
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <inicializarContadores>:
}

// Función para inicializar los contadores
void inicializarContadores() {
	count = 0;
 254:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <count+0x1>
 258:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <count>
 25c:	08 95       	ret

0000025e <chequeoFlag>:
}

// Función para chequear la Flag2
uint8_t chequeoFlag() {
	if (Flag_tiempo == 1) {
 25e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Flag_tiempo>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	19 f4       	brne	.+6      	; 0x26c <chequeoFlag+0xe>
		Flag_tiempo = 0;
 266:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <Flag_tiempo>
		return 1;
 26a:	08 95       	ret
		} else {
		return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 26e:	08 95       	ret

00000270 <main>:

volatile uint8_t suspendFlag = 0; // Bandera de suspensión
int main(void)
{ 
	
	RTC_Init();
 270:	0e 94 f5 01 	call	0x3ea	; 0x3ea <RTC_Init>
	//RTC_SetDate();
	//RTC_SetTime();
	int result=0;
   configurarTimer1();
 274:	0e 94 17 01 	call	0x22e	; 0x22e <configurarTimer1>
	SerialPort_Init(BR9600); 
 278:	87 e6       	ldi	r24, 0x67	; 103
 27a:	0e 94 99 02 	call	0x532	; 0x532 <SerialPort_Init>
	SerialPort_TX_Enable();		// Inicializo formato 8N1 y BAUDRATE = 9600bps
 27e:	0e 94 a3 02 	call	0x546	; 0x546 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
 282:	0e 94 a9 02 	call	0x552	; 0x552 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();
 286:	0e 94 af 02 	call	0x55e	; 0x55e <SerialPort_RX_Interrupt_Enable>
	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
 28a:	78 94       	sei
    while(1){ 
	if(!suspendFlag) {				
 28c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <suspendFlag>
 290:	81 11       	cpse	r24, r1
 292:	fc cf       	rjmp	.-8      	; 0x28c <main+0x1c>
		result = LeerDHT();
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <LeerDHT>
		  if (result == DHTLIB_OK) {
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	b1 f5       	brne	.+108    	; 0x308 <main+0x98>
			  SerialPort_Send_String(msg1);
 29c:	8a e1       	ldi	r24, 0x1A	; 26
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getHumedad());
 2a4:	0e 94 11 01 	call	0x222	; 0x222 <getHumedad>
 2a8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg2);
 2ac:	86 e1       	ldi	r24, 0x16	; 22
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			  SerialPort_Send_String(msg3);	
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			  SerialPort_Send_uint8_t(getTemperatura());
 2bc:	0e 94 14 01 	call	0x228	; 0x228 <getTemperatura>
 2c0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SerialPort_Send_uint8_t>
			  SerialPort_Send_String(msg4);
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			   cli();
 2cc:	f8 94       	cli
			   RTC_GetDate(fecha);
 2ce:	8b e7       	ldi	r24, 0x7B	; 123
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 3b 02 	call	0x476	; 0x476 <RTC_GetDate>
			   SerialPort_Send_String(" FECHA: ");
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			   SerialPort_Send_String(fecha);
 2de:	8b e7       	ldi	r24, 0x7B	; 123
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			   RTC_GetTime(hora);
 2e6:	87 e7       	ldi	r24, 0x77	; 119
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RTC_GetTime>
			   SerialPort_Send_String(" HORA: ");
 2ee:	8e e2       	ldi	r24, 0x2E	; 46
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			   SerialPort_Send_String(hora);
 2f6:	87 e7       	ldi	r24, 0x77	; 119
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
			   SerialPort_Send_String(salto);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
 306:	04 c0       	rjmp	.+8      	; 0x310 <main+0xa0>
			  }
			  else {SerialPort_Send_String("Se requiere conectar un DHT11\r\n");}
 308:	86 e3       	ldi	r24, 0x36	; 54
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 bd 02 	call	0x57a	; 0x57a <SerialPort_Send_String>
		sei();
 310:	78 94       	sei
			inicializarContadores();
 312:	0e 94 2a 01 	call	0x254	; 0x254 <inicializarContadores>
		  while(!chequeoFlag()) {
 316:	0e 94 2f 01 	call	0x25e	; 0x25e <chequeoFlag>
 31a:	88 23       	and	r24, r24
 31c:	e1 f3       	breq	.-8      	; 0x316 <main+0xa6>
 31e:	b6 cf       	rjmp	.-148    	; 0x28c <main+0x1c>

00000320 <__vector_11>:
	}
}


// ISR del TIMER1
ISR(TIMER1_COMPA_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
	count++;    // Incremento del contador para la Flag
 330:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <count>
 334:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <count+0x1>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <count+0x1>
 33e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <count>
	if (count == 2000) {
 342:	80 3d       	cpi	r24, 0xD0	; 208
 344:	97 40       	sbci	r25, 0x07	; 7
 346:	39 f4       	brne	.+14     	; 0x356 <__vector_11+0x36>
		Flag_tiempo = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Flag_tiempo>
		count = 0;
 34e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <count+0x1>
 352:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <count>
	}
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <bcdToDec>:
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
	I2C_Write(0x04); // Dirección de registro de fecha
	I2C_Write(0x10);
	I2C_Write(0x06);
	I2C_Write(0x24);
	I2C_Stop();
 366:	98 2f       	mov	r25, r24
 368:	92 95       	swap	r25
 36a:	9f 70       	andi	r25, 0x0F	; 15
 36c:	99 0f       	add	r25, r25
 36e:	29 2f       	mov	r18, r25
 370:	22 0f       	add	r18, r18
 372:	22 0f       	add	r18, r18
 374:	92 0f       	add	r25, r18
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	89 0f       	add	r24, r25
 37a:	08 95       	ret

0000037c <I2C_Init>:
 37c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 38c:	08 95       	ret

0000038e <I2C_Start>:
 38e:	84 ea       	ldi	r24, 0xA4	; 164
 390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 394:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 398:	88 23       	and	r24, r24
 39a:	e4 f7       	brge	.-8      	; 0x394 <I2C_Start+0x6>
 39c:	08 95       	ret

0000039e <I2C_Stop>:
 39e:	84 e9       	ldi	r24, 0x94	; 148
 3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a8:	84 fd       	sbrc	r24, 4
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <I2C_Stop+0x6>
 3ac:	08 95       	ret

000003ae <I2C_Write>:
 3ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3b2:	84 e8       	ldi	r24, 0x84	; 132
 3b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3bc:	88 23       	and	r24, r24
 3be:	e4 f7       	brge	.-8      	; 0x3b8 <I2C_Write+0xa>
 3c0:	08 95       	ret

000003c2 <I2C_ReadAck>:
 3c2:	84 ec       	ldi	r24, 0xC4	; 196
 3c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3cc:	88 23       	and	r24, r24
 3ce:	e4 f7       	brge	.-8      	; 0x3c8 <I2C_ReadAck+0x6>
 3d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3d4:	08 95       	ret

000003d6 <I2C_ReadNack>:
 3d6:	84 e8       	ldi	r24, 0x84	; 132
 3d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3e0:	88 23       	and	r24, r24
 3e2:	e4 f7       	brge	.-8      	; 0x3dc <I2C_ReadNack+0x6>
 3e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3e8:	08 95       	ret

000003ea <RTC_Init>:
 3ea:	0e 94 be 01 	call	0x37c	; 0x37c <I2C_Init>
 3ee:	08 95       	ret

000003f0 <RTC_GetTime>:
	
}

void RTC_GetTime(char* timeStr) {
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	c8 2f       	mov	r28, r24
 3fc:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x00 (segundos)
	I2C_Start();
 3fe:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 402:	80 ed       	ldi	r24, 0xD0	; 208
 404:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	I2C_Write(0x00); // Dirección de registro de segundos
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	I2C_Stop();
 40e:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Leer tiempo (segundos, minutos, horas)
	I2C_Start();
 412:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 416:	81 ed       	ldi	r24, 0xD1	; 209
 418:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	uint8_t seconds = bcdToDec(I2C_ReadAck());
 41c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_ReadAck>
 420:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 424:	f8 2e       	mov	r15, r24
	uint8_t minutes = bcdToDec(I2C_ReadAck());
 426:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_ReadAck>
 42a:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 42e:	08 2f       	mov	r16, r24
	uint8_t hours = bcdToDec(I2C_ReadNack());
 430:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_ReadNack>
 434:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 438:	18 2f       	mov	r17, r24
	I2C_Stop();
 43a:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Formatear hora
	sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
 43e:	1f 92       	push	r1
 440:	ff 92       	push	r15
 442:	1f 92       	push	r1
 444:	0f 93       	push	r16
 446:	1f 92       	push	r1
 448:	1f 93       	push	r17
 44a:	86 e5       	ldi	r24, 0x56	; 86
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	9f 93       	push	r25
 450:	8f 93       	push	r24
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
}
 45a:	8d b7       	in	r24, 0x3d	; 61
 45c:	9e b7       	in	r25, 0x3e	; 62
 45e:	0a 96       	adiw	r24, 0x0a	; 10
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	9e bf       	out	0x3e, r25	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	8d bf       	out	0x3d, r24	; 61
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	08 95       	ret

00000476 <RTC_GetDate>:

void RTC_GetDate(char* dateStr) {
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	c8 2f       	mov	r28, r24
 482:	d9 2f       	mov	r29, r25
	// Iniciar lectura desde la dirección 0x04 (día del mes)
	I2C_Start();
 484:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_WRITE);
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	I2C_Write(0x04); // Dirección de registro de día del mes
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	I2C_Stop();
 494:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Leer fecha (día, mes, año)
	I2C_Start();
 498:	0e 94 c7 01 	call	0x38e	; 0x38e <I2C_Start>
	I2C_Write((DS3232_ADDRESS << 1) | I2C_READ);
 49c:	81 ed       	ldi	r24, 0xD1	; 209
 49e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <I2C_Write>
	uint8_t day = bcdToDec(I2C_ReadAck());
 4a2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_ReadAck>
 4a6:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4aa:	18 2f       	mov	r17, r24
	uint8_t month = bcdToDec(I2C_ReadAck());
 4ac:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <I2C_ReadAck>
 4b0:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4b4:	08 2f       	mov	r16, r24
	uint8_t year = bcdToDec(I2C_ReadNack());
 4b6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <I2C_ReadNack>
 4ba:	0e 94 b3 01 	call	0x366	; 0x366 <bcdToDec>
 4be:	f8 2e       	mov	r15, r24
	I2C_Stop();
 4c0:	0e 94 cf 01 	call	0x39e	; 0x39e <I2C_Stop>

	// Formatear fecha
	sprintf(dateStr, "%02d/%02d/%02d", day, month, year);
 4c4:	1f 92       	push	r1
 4c6:	ff 92       	push	r15
 4c8:	1f 92       	push	r1
 4ca:	0f 93       	push	r16
 4cc:	1f 92       	push	r1
 4ce:	1f 93       	push	r17
 4d0:	85 e6       	ldi	r24, 0x65	; 101
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	9f 93       	push	r25
 4d6:	8f 93       	push	r24
 4d8:	df 93       	push	r29
 4da:	cf 93       	push	r28
 4dc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <sprintf>
}
 4e0:	8d b7       	in	r24, 0x3d	; 61
 4e2:	9e b7       	in	r25, 0x3e	; 62
 4e4:	0a 96       	adiw	r24, 0x0a	; 10
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	9e bf       	out	0x3e, r25	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	8d bf       	out	0x3d, r24	; 61
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	08 95       	ret

000004fc <__vector_18>:
}


char SerialPort_Recive_Data(void){
	return UDR0;
}
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 50e:	83 37       	cpi	r24, 0x73	; 115
 510:	11 f0       	breq	.+4      	; 0x516 <__vector_18+0x1a>
 512:	83 35       	cpi	r24, 0x53	; 83
 514:	39 f4       	brne	.+14     	; 0x524 <__vector_18+0x28>
 516:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <suspendFlag>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	91 11       	cpse	r25, r1
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <suspendFlag>
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <SerialPort_Init>:
 532:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 536:	96 e0       	ldi	r25, 0x06	; 6
 538:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 53c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 540:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 544:	08 95       	ret

00000546 <SerialPort_TX_Enable>:
 546:	e1 ec       	ldi	r30, 0xC1	; 193
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	88 60       	ori	r24, 0x08	; 8
 54e:	80 83       	st	Z, r24
 550:	08 95       	ret

00000552 <SerialPort_RX_Enable>:
 552:	e1 ec       	ldi	r30, 0xC1	; 193
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	80 61       	ori	r24, 0x10	; 16
 55a:	80 83       	st	Z, r24
 55c:	08 95       	ret

0000055e <SerialPort_RX_Interrupt_Enable>:
 55e:	e1 ec       	ldi	r30, 0xC1	; 193
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	80 68       	ori	r24, 0x80	; 128
 566:	80 83       	st	Z, r24
 568:	08 95       	ret

0000056a <SerialPort_Wait_For_TX_Buffer_Free>:
 56a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 56e:	85 ff       	sbrs	r24, 5
 570:	fc cf       	rjmp	.-8      	; 0x56a <SerialPort_Wait_For_TX_Buffer_Free>
 572:	08 95       	ret

00000574 <SerialPort_Send_Data>:
 574:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 578:	08 95       	ret

0000057a <SerialPort_Send_String>:
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	7c 01       	movw	r14, r24
 586:	c0 e0       	ldi	r28, 0x00	; 0
 588:	07 c0       	rjmp	.+14     	; 0x598 <SerialPort_Send_String+0x1e>
 58a:	0e 94 b5 02 	call	0x56a	; 0x56a <SerialPort_Wait_For_TX_Buffer_Free>
 58e:	f8 01       	movw	r30, r16
 590:	80 81       	ld	r24, Z
 592:	0e 94 ba 02 	call	0x574	; 0x574 <SerialPort_Send_Data>
 596:	cf 5f       	subi	r28, 0xFF	; 255
 598:	87 01       	movw	r16, r14
 59a:	0c 0f       	add	r16, r28
 59c:	11 1d       	adc	r17, r1
 59e:	f8 01       	movw	r30, r16
 5a0:	80 81       	ld	r24, Z
 5a2:	81 11       	cpse	r24, r1
 5a4:	f2 cf       	rjmp	.-28     	; 0x58a <SerialPort_Send_String+0x10>
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	08 95       	ret

000005b2 <SerialPort_Send_uint8_t>:


void SerialPort_Send_uint8_t(uint8_t num){
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	d8 2f       	mov	r29, r24
	
	SerialPort_Wait_For_TX_Buffer_Free();
 5b8:	0e 94 b5 02 	call	0x56a	; 0x56a <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+num/10);
 5bc:	cd ec       	ldi	r28, 0xCD	; 205
 5be:	dc 9f       	mul	r29, r28
 5c0:	c1 2d       	mov	r28, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	c6 95       	lsr	r28
 5c6:	c6 95       	lsr	r28
 5c8:	c6 95       	lsr	r28
 5ca:	80 e3       	ldi	r24, 0x30	; 48
 5cc:	8c 0f       	add	r24, r28
 5ce:	0e 94 ba 02 	call	0x574	; 0x574 <SerialPort_Send_Data>
	
	SerialPort_Wait_For_TX_Buffer_Free();
 5d2:	0e 94 b5 02 	call	0x56a	; 0x56a <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data('0'+ num%10);
 5d6:	cc 0f       	add	r28, r28
 5d8:	8c 2f       	mov	r24, r28
 5da:	88 0f       	add	r24, r24
 5dc:	88 0f       	add	r24, r24
 5de:	c8 0f       	add	r28, r24
 5e0:	8d 2f       	mov	r24, r29
 5e2:	8c 1b       	sub	r24, r28
 5e4:	80 5d       	subi	r24, 0xD0	; 208
 5e6:	0e 94 ba 02 	call	0x574	; 0x574 <SerialPort_Send_Data>
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <sprintf>:
 5f0:	ae e0       	ldi	r26, 0x0E	; 14
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	ee ef       	ldi	r30, 0xFE	; 254
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__prologue_saves__+0x1c>
 5fc:	0d 89       	ldd	r16, Y+21	; 0x15
 5fe:	1e 89       	ldd	r17, Y+22	; 0x16
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	8c 83       	std	Y+4, r24	; 0x04
 604:	1a 83       	std	Y+2, r17	; 0x02
 606:	09 83       	std	Y+1, r16	; 0x01
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	9f e7       	ldi	r25, 0x7F	; 127
 60c:	9e 83       	std	Y+6, r25	; 0x06
 60e:	8d 83       	std	Y+5, r24	; 0x05
 610:	ae 01       	movw	r20, r28
 612:	47 5e       	subi	r20, 0xE7	; 231
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	6f 89       	ldd	r22, Y+23	; 0x17
 618:	78 8d       	ldd	r23, Y+24	; 0x18
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	0e 94 1a 03 	call	0x634	; 0x634 <vfprintf>
 622:	ef 81       	ldd	r30, Y+7	; 0x07
 624:	f8 85       	ldd	r31, Y+8	; 0x08
 626:	e0 0f       	add	r30, r16
 628:	f1 1f       	adc	r31, r17
 62a:	10 82       	st	Z, r1
 62c:	2e 96       	adiw	r28, 0x0e	; 14
 62e:	e4 e0       	ldi	r30, 0x04	; 4
 630:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__epilogue_restores__+0x1c>

00000634 <vfprintf>:
 634:	ab e0       	ldi	r26, 0x0B	; 11
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e0 e2       	ldi	r30, 0x20	; 32
 63a:	f3 e0       	ldi	r31, 0x03	; 3
 63c:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__prologue_saves__>
 640:	6c 01       	movw	r12, r24
 642:	7b 01       	movw	r14, r22
 644:	8a 01       	movw	r16, r20
 646:	fc 01       	movw	r30, r24
 648:	17 82       	std	Z+7, r1	; 0x07
 64a:	16 82       	std	Z+6, r1	; 0x06
 64c:	83 81       	ldd	r24, Z+3	; 0x03
 64e:	81 ff       	sbrs	r24, 1
 650:	cc c1       	rjmp	.+920    	; 0x9ea <__stack+0xeb>
 652:	ce 01       	movw	r24, r28
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	3c 01       	movw	r6, r24
 658:	f6 01       	movw	r30, r12
 65a:	93 81       	ldd	r25, Z+3	; 0x03
 65c:	f7 01       	movw	r30, r14
 65e:	93 fd       	sbrc	r25, 3
 660:	85 91       	lpm	r24, Z+
 662:	93 ff       	sbrs	r25, 3
 664:	81 91       	ld	r24, Z+
 666:	7f 01       	movw	r14, r30
 668:	88 23       	and	r24, r24
 66a:	09 f4       	brne	.+2      	; 0x66e <vfprintf+0x3a>
 66c:	ba c1       	rjmp	.+884    	; 0x9e2 <__stack+0xe3>
 66e:	85 32       	cpi	r24, 0x25	; 37
 670:	39 f4       	brne	.+14     	; 0x680 <vfprintf+0x4c>
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	7f 01       	movw	r14, r30
 67c:	85 32       	cpi	r24, 0x25	; 37
 67e:	29 f4       	brne	.+10     	; 0x68a <vfprintf+0x56>
 680:	b6 01       	movw	r22, r12
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 688:	e7 cf       	rjmp	.-50     	; 0x658 <vfprintf+0x24>
 68a:	91 2c       	mov	r9, r1
 68c:	21 2c       	mov	r2, r1
 68e:	31 2c       	mov	r3, r1
 690:	ff e1       	ldi	r31, 0x1F	; 31
 692:	f3 15       	cp	r31, r3
 694:	d8 f0       	brcs	.+54     	; 0x6cc <vfprintf+0x98>
 696:	8b 32       	cpi	r24, 0x2B	; 43
 698:	79 f0       	breq	.+30     	; 0x6b8 <vfprintf+0x84>
 69a:	38 f4       	brcc	.+14     	; 0x6aa <vfprintf+0x76>
 69c:	80 32       	cpi	r24, 0x20	; 32
 69e:	79 f0       	breq	.+30     	; 0x6be <vfprintf+0x8a>
 6a0:	83 32       	cpi	r24, 0x23	; 35
 6a2:	a1 f4       	brne	.+40     	; 0x6cc <vfprintf+0x98>
 6a4:	23 2d       	mov	r18, r3
 6a6:	20 61       	ori	r18, 0x10	; 16
 6a8:	1d c0       	rjmp	.+58     	; 0x6e4 <vfprintf+0xb0>
 6aa:	8d 32       	cpi	r24, 0x2D	; 45
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <vfprintf+0x92>
 6ae:	80 33       	cpi	r24, 0x30	; 48
 6b0:	69 f4       	brne	.+26     	; 0x6cc <vfprintf+0x98>
 6b2:	23 2d       	mov	r18, r3
 6b4:	21 60       	ori	r18, 0x01	; 1
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <vfprintf+0xb0>
 6b8:	83 2d       	mov	r24, r3
 6ba:	82 60       	ori	r24, 0x02	; 2
 6bc:	38 2e       	mov	r3, r24
 6be:	e3 2d       	mov	r30, r3
 6c0:	e4 60       	ori	r30, 0x04	; 4
 6c2:	3e 2e       	mov	r3, r30
 6c4:	2a c0       	rjmp	.+84     	; 0x71a <vfprintf+0xe6>
 6c6:	f3 2d       	mov	r31, r3
 6c8:	f8 60       	ori	r31, 0x08	; 8
 6ca:	1d c0       	rjmp	.+58     	; 0x706 <vfprintf+0xd2>
 6cc:	37 fc       	sbrc	r3, 7
 6ce:	2d c0       	rjmp	.+90     	; 0x72a <vfprintf+0xf6>
 6d0:	20 ed       	ldi	r18, 0xD0	; 208
 6d2:	28 0f       	add	r18, r24
 6d4:	2a 30       	cpi	r18, 0x0A	; 10
 6d6:	40 f0       	brcs	.+16     	; 0x6e8 <vfprintf+0xb4>
 6d8:	8e 32       	cpi	r24, 0x2E	; 46
 6da:	b9 f4       	brne	.+46     	; 0x70a <vfprintf+0xd6>
 6dc:	36 fc       	sbrc	r3, 6
 6de:	81 c1       	rjmp	.+770    	; 0x9e2 <__stack+0xe3>
 6e0:	23 2d       	mov	r18, r3
 6e2:	20 64       	ori	r18, 0x40	; 64
 6e4:	32 2e       	mov	r3, r18
 6e6:	19 c0       	rjmp	.+50     	; 0x71a <vfprintf+0xe6>
 6e8:	36 fe       	sbrs	r3, 6
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0xc4>
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	98 9e       	mul	r9, r24
 6f0:	20 0d       	add	r18, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	92 2e       	mov	r9, r18
 6f6:	11 c0       	rjmp	.+34     	; 0x71a <vfprintf+0xe6>
 6f8:	ea e0       	ldi	r30, 0x0A	; 10
 6fa:	2e 9e       	mul	r2, r30
 6fc:	20 0d       	add	r18, r0
 6fe:	11 24       	eor	r1, r1
 700:	22 2e       	mov	r2, r18
 702:	f3 2d       	mov	r31, r3
 704:	f0 62       	ori	r31, 0x20	; 32
 706:	3f 2e       	mov	r3, r31
 708:	08 c0       	rjmp	.+16     	; 0x71a <vfprintf+0xe6>
 70a:	8c 36       	cpi	r24, 0x6C	; 108
 70c:	21 f4       	brne	.+8      	; 0x716 <vfprintf+0xe2>
 70e:	83 2d       	mov	r24, r3
 710:	80 68       	ori	r24, 0x80	; 128
 712:	38 2e       	mov	r3, r24
 714:	02 c0       	rjmp	.+4      	; 0x71a <vfprintf+0xe6>
 716:	88 36       	cpi	r24, 0x68	; 104
 718:	41 f4       	brne	.+16     	; 0x72a <vfprintf+0xf6>
 71a:	f7 01       	movw	r30, r14
 71c:	93 fd       	sbrc	r25, 3
 71e:	85 91       	lpm	r24, Z+
 720:	93 ff       	sbrs	r25, 3
 722:	81 91       	ld	r24, Z+
 724:	7f 01       	movw	r14, r30
 726:	81 11       	cpse	r24, r1
 728:	b3 cf       	rjmp	.-154    	; 0x690 <vfprintf+0x5c>
 72a:	98 2f       	mov	r25, r24
 72c:	9f 7d       	andi	r25, 0xDF	; 223
 72e:	95 54       	subi	r25, 0x45	; 69
 730:	93 30       	cpi	r25, 0x03	; 3
 732:	28 f4       	brcc	.+10     	; 0x73e <vfprintf+0x10a>
 734:	0c 5f       	subi	r16, 0xFC	; 252
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	9f e3       	ldi	r25, 0x3F	; 63
 73a:	99 83       	std	Y+1, r25	; 0x01
 73c:	0d c0       	rjmp	.+26     	; 0x758 <vfprintf+0x124>
 73e:	83 36       	cpi	r24, 0x63	; 99
 740:	31 f0       	breq	.+12     	; 0x74e <vfprintf+0x11a>
 742:	83 37       	cpi	r24, 0x73	; 115
 744:	71 f0       	breq	.+28     	; 0x762 <vfprintf+0x12e>
 746:	83 35       	cpi	r24, 0x53	; 83
 748:	09 f0       	breq	.+2      	; 0x74c <vfprintf+0x118>
 74a:	59 c0       	rjmp	.+178    	; 0x7fe <vfprintf+0x1ca>
 74c:	21 c0       	rjmp	.+66     	; 0x790 <vfprintf+0x15c>
 74e:	f8 01       	movw	r30, r16
 750:	80 81       	ld	r24, Z
 752:	89 83       	std	Y+1, r24	; 0x01
 754:	0e 5f       	subi	r16, 0xFE	; 254
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	88 24       	eor	r8, r8
 75a:	83 94       	inc	r8
 75c:	91 2c       	mov	r9, r1
 75e:	53 01       	movw	r10, r6
 760:	13 c0       	rjmp	.+38     	; 0x788 <vfprintf+0x154>
 762:	28 01       	movw	r4, r16
 764:	f2 e0       	ldi	r31, 0x02	; 2
 766:	4f 0e       	add	r4, r31
 768:	51 1c       	adc	r5, r1
 76a:	f8 01       	movw	r30, r16
 76c:	a0 80       	ld	r10, Z
 76e:	b1 80       	ldd	r11, Z+1	; 0x01
 770:	36 fe       	sbrs	r3, 6
 772:	03 c0       	rjmp	.+6      	; 0x77a <vfprintf+0x146>
 774:	69 2d       	mov	r22, r9
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <vfprintf+0x14a>
 77a:	6f ef       	ldi	r22, 0xFF	; 255
 77c:	7f ef       	ldi	r23, 0xFF	; 255
 77e:	c5 01       	movw	r24, r10
 780:	0e 94 06 05 	call	0xa0c	; 0xa0c <strnlen>
 784:	4c 01       	movw	r8, r24
 786:	82 01       	movw	r16, r4
 788:	f3 2d       	mov	r31, r3
 78a:	ff 77       	andi	r31, 0x7F	; 127
 78c:	3f 2e       	mov	r3, r31
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <vfprintf+0x188>
 790:	28 01       	movw	r4, r16
 792:	22 e0       	ldi	r18, 0x02	; 2
 794:	42 0e       	add	r4, r18
 796:	51 1c       	adc	r5, r1
 798:	f8 01       	movw	r30, r16
 79a:	a0 80       	ld	r10, Z
 79c:	b1 80       	ldd	r11, Z+1	; 0x01
 79e:	36 fe       	sbrs	r3, 6
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <vfprintf+0x174>
 7a2:	69 2d       	mov	r22, r9
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0x178>
 7a8:	6f ef       	ldi	r22, 0xFF	; 255
 7aa:	7f ef       	ldi	r23, 0xFF	; 255
 7ac:	c5 01       	movw	r24, r10
 7ae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <strnlen_P>
 7b2:	4c 01       	movw	r8, r24
 7b4:	f3 2d       	mov	r31, r3
 7b6:	f0 68       	ori	r31, 0x80	; 128
 7b8:	3f 2e       	mov	r3, r31
 7ba:	82 01       	movw	r16, r4
 7bc:	33 fc       	sbrc	r3, 3
 7be:	1b c0       	rjmp	.+54     	; 0x7f6 <vfprintf+0x1c2>
 7c0:	82 2d       	mov	r24, r2
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	88 16       	cp	r8, r24
 7c6:	99 06       	cpc	r9, r25
 7c8:	b0 f4       	brcc	.+44     	; 0x7f6 <vfprintf+0x1c2>
 7ca:	b6 01       	movw	r22, r12
 7cc:	80 e2       	ldi	r24, 0x20	; 32
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 7d4:	2a 94       	dec	r2
 7d6:	f4 cf       	rjmp	.-24     	; 0x7c0 <vfprintf+0x18c>
 7d8:	f5 01       	movw	r30, r10
 7da:	37 fc       	sbrc	r3, 7
 7dc:	85 91       	lpm	r24, Z+
 7de:	37 fe       	sbrs	r3, 7
 7e0:	81 91       	ld	r24, Z+
 7e2:	5f 01       	movw	r10, r30
 7e4:	b6 01       	movw	r22, r12
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 7ec:	21 10       	cpse	r2, r1
 7ee:	2a 94       	dec	r2
 7f0:	21 e0       	ldi	r18, 0x01	; 1
 7f2:	82 1a       	sub	r8, r18
 7f4:	91 08       	sbc	r9, r1
 7f6:	81 14       	cp	r8, r1
 7f8:	91 04       	cpc	r9, r1
 7fa:	71 f7       	brne	.-36     	; 0x7d8 <vfprintf+0x1a4>
 7fc:	e8 c0       	rjmp	.+464    	; 0x9ce <__stack+0xcf>
 7fe:	84 36       	cpi	r24, 0x64	; 100
 800:	11 f0       	breq	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	89 36       	cpi	r24, 0x69	; 105
 804:	41 f5       	brne	.+80     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 806:	f8 01       	movw	r30, r16
 808:	37 fe       	sbrs	r3, 7
 80a:	07 c0       	rjmp	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	08 c0       	rjmp	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	07 2e       	mov	r0, r23
 820:	00 0c       	add	r0, r0
 822:	88 0b       	sbc	r24, r24
 824:	99 0b       	sbc	r25, r25
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	f3 2d       	mov	r31, r3
 82c:	ff 76       	andi	r31, 0x6F	; 111
 82e:	3f 2e       	mov	r3, r31
 830:	97 ff       	sbrs	r25, 7
 832:	09 c0       	rjmp	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	90 95       	com	r25
 836:	80 95       	com	r24
 838:	70 95       	com	r23
 83a:	61 95       	neg	r22
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	f0 68       	ori	r31, 0x80	; 128
 844:	3f 2e       	mov	r3, r31
 846:	2a e0       	ldi	r18, 0x0A	; 10
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	a3 01       	movw	r20, r6
 84c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__ultoa_invert>
 850:	88 2e       	mov	r8, r24
 852:	86 18       	sub	r8, r6
 854:	45 c0       	rjmp	.+138    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 856:	85 37       	cpi	r24, 0x75	; 117
 858:	31 f4       	brne	.+12     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 85a:	23 2d       	mov	r18, r3
 85c:	2f 7e       	andi	r18, 0xEF	; 239
 85e:	b2 2e       	mov	r11, r18
 860:	2a e0       	ldi	r18, 0x0A	; 10
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	25 c0       	rjmp	.+74     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 866:	93 2d       	mov	r25, r3
 868:	99 7f       	andi	r25, 0xF9	; 249
 86a:	b9 2e       	mov	r11, r25
 86c:	8f 36       	cpi	r24, 0x6F	; 111
 86e:	c1 f0       	breq	.+48     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 870:	18 f4       	brcc	.+6      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 872:	88 35       	cpi	r24, 0x58	; 88
 874:	79 f0       	breq	.+30     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 876:	b5 c0       	rjmp	.+362    	; 0x9e2 <__stack+0xe3>
 878:	80 37       	cpi	r24, 0x70	; 112
 87a:	19 f0       	breq	.+6      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 87c:	88 37       	cpi	r24, 0x78	; 120
 87e:	21 f0       	breq	.+8      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 880:	b0 c0       	rjmp	.+352    	; 0x9e2 <__stack+0xe3>
 882:	e9 2f       	mov	r30, r25
 884:	e0 61       	ori	r30, 0x10	; 16
 886:	be 2e       	mov	r11, r30
 888:	b4 fe       	sbrs	r11, 4
 88a:	0d c0       	rjmp	.+26     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 88c:	fb 2d       	mov	r31, r11
 88e:	f4 60       	ori	r31, 0x04	; 4
 890:	bf 2e       	mov	r11, r31
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 894:	34 fe       	sbrs	r3, 4
 896:	0a c0       	rjmp	.+20     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 898:	29 2f       	mov	r18, r25
 89a:	26 60       	ori	r18, 0x06	; 6
 89c:	b2 2e       	mov	r11, r18
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a0:	28 e0       	ldi	r18, 0x08	; 8
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8a6:	20 e1       	ldi	r18, 0x10	; 16
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ac:	20 e1       	ldi	r18, 0x10	; 16
 8ae:	32 e0       	ldi	r19, 0x02	; 2
 8b0:	f8 01       	movw	r30, r16
 8b2:	b7 fe       	sbrs	r11, 7
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b6:	60 81       	ld	r22, Z
 8b8:	71 81       	ldd	r23, Z+1	; 0x01
 8ba:	82 81       	ldd	r24, Z+2	; 0x02
 8bc:	93 81       	ldd	r25, Z+3	; 0x03
 8be:	0c 5f       	subi	r16, 0xFC	; 252
 8c0:	1f 4f       	sbci	r17, 0xFF	; 255
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c4:	60 81       	ld	r22, Z
 8c6:	71 81       	ldd	r23, Z+1	; 0x01
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 5f       	subi	r16, 0xFE	; 254
 8ce:	1f 4f       	sbci	r17, 0xFF	; 255
 8d0:	a3 01       	movw	r20, r6
 8d2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__ultoa_invert>
 8d6:	88 2e       	mov	r8, r24
 8d8:	86 18       	sub	r8, r6
 8da:	fb 2d       	mov	r31, r11
 8dc:	ff 77       	andi	r31, 0x7F	; 127
 8de:	3f 2e       	mov	r3, r31
 8e0:	36 fe       	sbrs	r3, 6
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8e4:	23 2d       	mov	r18, r3
 8e6:	2e 7f       	andi	r18, 0xFE	; 254
 8e8:	a2 2e       	mov	r10, r18
 8ea:	89 14       	cp	r8, r9
 8ec:	58 f4       	brcc	.+22     	; 0x904 <__stack+0x5>
 8ee:	34 fe       	sbrs	r3, 4
 8f0:	0b c0       	rjmp	.+22     	; 0x908 <__stack+0x9>
 8f2:	32 fc       	sbrc	r3, 2
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__stack+0x9>
 8f6:	83 2d       	mov	r24, r3
 8f8:	8e 7e       	andi	r24, 0xEE	; 238
 8fa:	a8 2e       	mov	r10, r24
 8fc:	05 c0       	rjmp	.+10     	; 0x908 <__stack+0x9>
 8fe:	b8 2c       	mov	r11, r8
 900:	a3 2c       	mov	r10, r3
 902:	03 c0       	rjmp	.+6      	; 0x90a <__stack+0xb>
 904:	b8 2c       	mov	r11, r8
 906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
 908:	b9 2c       	mov	r11, r9
 90a:	a4 fe       	sbrs	r10, 4
 90c:	0f c0       	rjmp	.+30     	; 0x92c <__stack+0x2d>
 90e:	fe 01       	movw	r30, r28
 910:	e8 0d       	add	r30, r8
 912:	f1 1d       	adc	r31, r1
 914:	80 81       	ld	r24, Z
 916:	80 33       	cpi	r24, 0x30	; 48
 918:	21 f4       	brne	.+8      	; 0x922 <__stack+0x23>
 91a:	9a 2d       	mov	r25, r10
 91c:	99 7e       	andi	r25, 0xE9	; 233
 91e:	a9 2e       	mov	r10, r25
 920:	09 c0       	rjmp	.+18     	; 0x934 <__stack+0x35>
 922:	a2 fe       	sbrs	r10, 2
 924:	06 c0       	rjmp	.+12     	; 0x932 <__stack+0x33>
 926:	b3 94       	inc	r11
 928:	b3 94       	inc	r11
 92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
 92c:	8a 2d       	mov	r24, r10
 92e:	86 78       	andi	r24, 0x86	; 134
 930:	09 f0       	breq	.+2      	; 0x934 <__stack+0x35>
 932:	b3 94       	inc	r11
 934:	a3 fc       	sbrc	r10, 3
 936:	11 c0       	rjmp	.+34     	; 0x95a <__stack+0x5b>
 938:	a0 fe       	sbrs	r10, 0
 93a:	06 c0       	rjmp	.+12     	; 0x948 <__stack+0x49>
 93c:	b2 14       	cp	r11, r2
 93e:	88 f4       	brcc	.+34     	; 0x962 <__stack+0x63>
 940:	28 0c       	add	r2, r8
 942:	92 2c       	mov	r9, r2
 944:	9b 18       	sub	r9, r11
 946:	0e c0       	rjmp	.+28     	; 0x964 <__stack+0x65>
 948:	b2 14       	cp	r11, r2
 94a:	60 f4       	brcc	.+24     	; 0x964 <__stack+0x65>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 956:	b3 94       	inc	r11
 958:	f7 cf       	rjmp	.-18     	; 0x948 <__stack+0x49>
 95a:	b2 14       	cp	r11, r2
 95c:	18 f4       	brcc	.+6      	; 0x964 <__stack+0x65>
 95e:	2b 18       	sub	r2, r11
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
 962:	98 2c       	mov	r9, r8
 964:	21 2c       	mov	r2, r1
 966:	a4 fe       	sbrs	r10, 4
 968:	10 c0       	rjmp	.+32     	; 0x98a <__stack+0x8b>
 96a:	b6 01       	movw	r22, r12
 96c:	80 e3       	ldi	r24, 0x30	; 48
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 974:	a2 fe       	sbrs	r10, 2
 976:	17 c0       	rjmp	.+46     	; 0x9a6 <__stack+0xa7>
 978:	a1 fc       	sbrc	r10, 1
 97a:	03 c0       	rjmp	.+6      	; 0x982 <__stack+0x83>
 97c:	88 e7       	ldi	r24, 0x78	; 120
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
 982:	88 e5       	ldi	r24, 0x58	; 88
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	b6 01       	movw	r22, r12
 988:	0c c0       	rjmp	.+24     	; 0x9a2 <__stack+0xa3>
 98a:	8a 2d       	mov	r24, r10
 98c:	86 78       	andi	r24, 0x86	; 134
 98e:	59 f0       	breq	.+22     	; 0x9a6 <__stack+0xa7>
 990:	a1 fe       	sbrs	r10, 1
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	8b e2       	ldi	r24, 0x2B	; 43
 996:	01 c0       	rjmp	.+2      	; 0x99a <__stack+0x9b>
 998:	80 e2       	ldi	r24, 0x20	; 32
 99a:	a7 fc       	sbrc	r10, 7
 99c:	8d e2       	ldi	r24, 0x2D	; 45
 99e:	b6 01       	movw	r22, r12
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 9a6:	89 14       	cp	r8, r9
 9a8:	38 f4       	brcc	.+14     	; 0x9b8 <__stack+0xb9>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e3       	ldi	r24, 0x30	; 48
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 9b4:	9a 94       	dec	r9
 9b6:	f7 cf       	rjmp	.-18     	; 0x9a6 <__stack+0xa7>
 9b8:	8a 94       	dec	r8
 9ba:	f3 01       	movw	r30, r6
 9bc:	e8 0d       	add	r30, r8
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	b6 01       	movw	r22, r12
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 9ca:	81 10       	cpse	r8, r1
 9cc:	f5 cf       	rjmp	.-22     	; 0x9b8 <__stack+0xb9>
 9ce:	22 20       	and	r2, r2
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0xd5>
 9d2:	42 ce       	rjmp	.-892    	; 0x658 <vfprintf+0x24>
 9d4:	b6 01       	movw	r22, r12
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 11 05 	call	0xa22	; 0xa22 <fputc>
 9de:	2a 94       	dec	r2
 9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <__stack+0xcf>
 9e2:	f6 01       	movw	r30, r12
 9e4:	86 81       	ldd	r24, Z+6	; 0x06
 9e6:	97 81       	ldd	r25, Z+7	; 0x07
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__stack+0xef>
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	9f ef       	ldi	r25, 0xFF	; 255
 9ee:	2b 96       	adiw	r28, 0x0b	; 11
 9f0:	e2 e1       	ldi	r30, 0x12	; 18
 9f2:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__epilogue_restores__>

000009f6 <strnlen_P>:
 9f6:	fc 01       	movw	r30, r24
 9f8:	05 90       	lpm	r0, Z+
 9fa:	61 50       	subi	r22, 0x01	; 1
 9fc:	70 40       	sbci	r23, 0x00	; 0
 9fe:	01 10       	cpse	r0, r1
 a00:	d8 f7       	brcc	.-10     	; 0x9f8 <strnlen_P+0x2>
 a02:	80 95       	com	r24
 a04:	90 95       	com	r25
 a06:	8e 0f       	add	r24, r30
 a08:	9f 1f       	adc	r25, r31
 a0a:	08 95       	ret

00000a0c <strnlen>:
 a0c:	fc 01       	movw	r30, r24
 a0e:	61 50       	subi	r22, 0x01	; 1
 a10:	70 40       	sbci	r23, 0x00	; 0
 a12:	01 90       	ld	r0, Z+
 a14:	01 10       	cpse	r0, r1
 a16:	d8 f7       	brcc	.-10     	; 0xa0e <strnlen+0x2>
 a18:	80 95       	com	r24
 a1a:	90 95       	com	r25
 a1c:	8e 0f       	add	r24, r30
 a1e:	9f 1f       	adc	r25, r31
 a20:	08 95       	ret

00000a22 <fputc>:
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	fb 01       	movw	r30, r22
 a2c:	23 81       	ldd	r18, Z+3	; 0x03
 a2e:	21 fd       	sbrc	r18, 1
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <fputc+0x16>
 a32:	8f ef       	ldi	r24, 0xFF	; 255
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	2c c0       	rjmp	.+88     	; 0xa90 <fputc+0x6e>
 a38:	22 ff       	sbrs	r18, 2
 a3a:	16 c0       	rjmp	.+44     	; 0xa68 <fputc+0x46>
 a3c:	46 81       	ldd	r20, Z+6	; 0x06
 a3e:	57 81       	ldd	r21, Z+7	; 0x07
 a40:	24 81       	ldd	r18, Z+4	; 0x04
 a42:	35 81       	ldd	r19, Z+5	; 0x05
 a44:	42 17       	cp	r20, r18
 a46:	53 07       	cpc	r21, r19
 a48:	44 f4       	brge	.+16     	; 0xa5a <fputc+0x38>
 a4a:	a0 81       	ld	r26, Z
 a4c:	b1 81       	ldd	r27, Z+1	; 0x01
 a4e:	9d 01       	movw	r18, r26
 a50:	2f 5f       	subi	r18, 0xFF	; 255
 a52:	3f 4f       	sbci	r19, 0xFF	; 255
 a54:	31 83       	std	Z+1, r19	; 0x01
 a56:	20 83       	st	Z, r18
 a58:	8c 93       	st	X, r24
 a5a:	26 81       	ldd	r18, Z+6	; 0x06
 a5c:	37 81       	ldd	r19, Z+7	; 0x07
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	37 83       	std	Z+7, r19	; 0x07
 a64:	26 83       	std	Z+6, r18	; 0x06
 a66:	14 c0       	rjmp	.+40     	; 0xa90 <fputc+0x6e>
 a68:	8b 01       	movw	r16, r22
 a6a:	ec 01       	movw	r28, r24
 a6c:	fb 01       	movw	r30, r22
 a6e:	00 84       	ldd	r0, Z+8	; 0x08
 a70:	f1 85       	ldd	r31, Z+9	; 0x09
 a72:	e0 2d       	mov	r30, r0
 a74:	09 95       	icall
 a76:	89 2b       	or	r24, r25
 a78:	e1 f6       	brne	.-72     	; 0xa32 <fputc+0x10>
 a7a:	d8 01       	movw	r26, r16
 a7c:	16 96       	adiw	r26, 0x06	; 6
 a7e:	8d 91       	ld	r24, X+
 a80:	9c 91       	ld	r25, X
 a82:	17 97       	sbiw	r26, 0x07	; 7
 a84:	01 96       	adiw	r24, 0x01	; 1
 a86:	17 96       	adiw	r26, 0x07	; 7
 a88:	9c 93       	st	X, r25
 a8a:	8e 93       	st	-X, r24
 a8c:	16 97       	sbiw	r26, 0x06	; 6
 a8e:	ce 01       	movw	r24, r28
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	1f 91       	pop	r17
 a96:	0f 91       	pop	r16
 a98:	08 95       	ret

00000a9a <__ultoa_invert>:
 a9a:	fa 01       	movw	r30, r20
 a9c:	aa 27       	eor	r26, r26
 a9e:	28 30       	cpi	r18, 0x08	; 8
 aa0:	51 f1       	breq	.+84     	; 0xaf6 <__ultoa_invert+0x5c>
 aa2:	20 31       	cpi	r18, 0x10	; 16
 aa4:	81 f1       	breq	.+96     	; 0xb06 <__ultoa_invert+0x6c>
 aa6:	e8 94       	clt
 aa8:	6f 93       	push	r22
 aaa:	6e 7f       	andi	r22, 0xFE	; 254
 aac:	6e 5f       	subi	r22, 0xFE	; 254
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	af 4f       	sbci	r26, 0xFF	; 255
 ab6:	b1 e0       	ldi	r27, 0x01	; 1
 ab8:	3e d0       	rcall	.+124    	; 0xb36 <__ultoa_invert+0x9c>
 aba:	b4 e0       	ldi	r27, 0x04	; 4
 abc:	3c d0       	rcall	.+120    	; 0xb36 <__ultoa_invert+0x9c>
 abe:	67 0f       	add	r22, r23
 ac0:	78 1f       	adc	r23, r24
 ac2:	89 1f       	adc	r24, r25
 ac4:	9a 1f       	adc	r25, r26
 ac6:	a1 1d       	adc	r26, r1
 ac8:	68 0f       	add	r22, r24
 aca:	79 1f       	adc	r23, r25
 acc:	8a 1f       	adc	r24, r26
 ace:	91 1d       	adc	r25, r1
 ad0:	a1 1d       	adc	r26, r1
 ad2:	6a 0f       	add	r22, r26
 ad4:	71 1d       	adc	r23, r1
 ad6:	81 1d       	adc	r24, r1
 ad8:	91 1d       	adc	r25, r1
 ada:	a1 1d       	adc	r26, r1
 adc:	20 d0       	rcall	.+64     	; 0xb1e <__ultoa_invert+0x84>
 ade:	09 f4       	brne	.+2      	; 0xae2 <__ultoa_invert+0x48>
 ae0:	68 94       	set
 ae2:	3f 91       	pop	r19
 ae4:	2a e0       	ldi	r18, 0x0A	; 10
 ae6:	26 9f       	mul	r18, r22
 ae8:	11 24       	eor	r1, r1
 aea:	30 19       	sub	r19, r0
 aec:	30 5d       	subi	r19, 0xD0	; 208
 aee:	31 93       	st	Z+, r19
 af0:	de f6       	brtc	.-74     	; 0xaa8 <__ultoa_invert+0xe>
 af2:	cf 01       	movw	r24, r30
 af4:	08 95       	ret
 af6:	46 2f       	mov	r20, r22
 af8:	47 70       	andi	r20, 0x07	; 7
 afa:	40 5d       	subi	r20, 0xD0	; 208
 afc:	41 93       	st	Z+, r20
 afe:	b3 e0       	ldi	r27, 0x03	; 3
 b00:	0f d0       	rcall	.+30     	; 0xb20 <__ultoa_invert+0x86>
 b02:	c9 f7       	brne	.-14     	; 0xaf6 <__ultoa_invert+0x5c>
 b04:	f6 cf       	rjmp	.-20     	; 0xaf2 <__ultoa_invert+0x58>
 b06:	46 2f       	mov	r20, r22
 b08:	4f 70       	andi	r20, 0x0F	; 15
 b0a:	40 5d       	subi	r20, 0xD0	; 208
 b0c:	4a 33       	cpi	r20, 0x3A	; 58
 b0e:	18 f0       	brcs	.+6      	; 0xb16 <__ultoa_invert+0x7c>
 b10:	49 5d       	subi	r20, 0xD9	; 217
 b12:	31 fd       	sbrc	r19, 1
 b14:	40 52       	subi	r20, 0x20	; 32
 b16:	41 93       	st	Z+, r20
 b18:	02 d0       	rcall	.+4      	; 0xb1e <__ultoa_invert+0x84>
 b1a:	a9 f7       	brne	.-22     	; 0xb06 <__ultoa_invert+0x6c>
 b1c:	ea cf       	rjmp	.-44     	; 0xaf2 <__ultoa_invert+0x58>
 b1e:	b4 e0       	ldi	r27, 0x04	; 4
 b20:	a6 95       	lsr	r26
 b22:	97 95       	ror	r25
 b24:	87 95       	ror	r24
 b26:	77 95       	ror	r23
 b28:	67 95       	ror	r22
 b2a:	ba 95       	dec	r27
 b2c:	c9 f7       	brne	.-14     	; 0xb20 <__ultoa_invert+0x86>
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	61 05       	cpc	r22, r1
 b32:	71 05       	cpc	r23, r1
 b34:	08 95       	ret
 b36:	9b 01       	movw	r18, r22
 b38:	ac 01       	movw	r20, r24
 b3a:	0a 2e       	mov	r0, r26
 b3c:	06 94       	lsr	r0
 b3e:	57 95       	ror	r21
 b40:	47 95       	ror	r20
 b42:	37 95       	ror	r19
 b44:	27 95       	ror	r18
 b46:	ba 95       	dec	r27
 b48:	c9 f7       	brne	.-14     	; 0xb3c <__ultoa_invert+0xa2>
 b4a:	62 0f       	add	r22, r18
 b4c:	73 1f       	adc	r23, r19
 b4e:	84 1f       	adc	r24, r20
 b50:	95 1f       	adc	r25, r21
 b52:	a0 1d       	adc	r26, r0
 b54:	08 95       	ret

00000b56 <__prologue_saves__>:
 b56:	2f 92       	push	r2
 b58:	3f 92       	push	r3
 b5a:	4f 92       	push	r4
 b5c:	5f 92       	push	r5
 b5e:	6f 92       	push	r6
 b60:	7f 92       	push	r7
 b62:	8f 92       	push	r8
 b64:	9f 92       	push	r9
 b66:	af 92       	push	r10
 b68:	bf 92       	push	r11
 b6a:	cf 92       	push	r12
 b6c:	df 92       	push	r13
 b6e:	ef 92       	push	r14
 b70:	ff 92       	push	r15
 b72:	0f 93       	push	r16
 b74:	1f 93       	push	r17
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
 b7a:	cd b7       	in	r28, 0x3d	; 61
 b7c:	de b7       	in	r29, 0x3e	; 62
 b7e:	ca 1b       	sub	r28, r26
 b80:	db 0b       	sbc	r29, r27
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	f8 94       	cli
 b86:	de bf       	out	0x3e, r29	; 62
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	cd bf       	out	0x3d, r28	; 61
 b8c:	09 94       	ijmp

00000b8e <__epilogue_restores__>:
 b8e:	2a 88       	ldd	r2, Y+18	; 0x12
 b90:	39 88       	ldd	r3, Y+17	; 0x11
 b92:	48 88       	ldd	r4, Y+16	; 0x10
 b94:	5f 84       	ldd	r5, Y+15	; 0x0f
 b96:	6e 84       	ldd	r6, Y+14	; 0x0e
 b98:	7d 84       	ldd	r7, Y+13	; 0x0d
 b9a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b9c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
 ba0:	b9 84       	ldd	r11, Y+9	; 0x09
 ba2:	c8 84       	ldd	r12, Y+8	; 0x08
 ba4:	df 80       	ldd	r13, Y+7	; 0x07
 ba6:	ee 80       	ldd	r14, Y+6	; 0x06
 ba8:	fd 80       	ldd	r15, Y+5	; 0x05
 baa:	0c 81       	ldd	r16, Y+4	; 0x04
 bac:	1b 81       	ldd	r17, Y+3	; 0x03
 bae:	aa 81       	ldd	r26, Y+2	; 0x02
 bb0:	b9 81       	ldd	r27, Y+1	; 0x01
 bb2:	ce 0f       	add	r28, r30
 bb4:	d1 1d       	adc	r29, r1
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	f8 94       	cli
 bba:	de bf       	out	0x3e, r29	; 62
 bbc:	0f be       	out	0x3f, r0	; 63
 bbe:	cd bf       	out	0x3d, r28	; 61
 bc0:	ed 01       	movw	r28, r26
 bc2:	08 95       	ret

00000bc4 <_exit>:
 bc4:	f8 94       	cli

00000bc6 <__stop_program>:
 bc6:	ff cf       	rjmp	.-2      	; 0xbc6 <__stop_program>
